[{"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\context\\LayoutContext.js":"3","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\index.js":"4","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\Error.js":"5","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\Layout.js":"6","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\default.js":"7","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\Charts.js":"8","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js":"9","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js":"10","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\Widget.js":"11","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\PageTitle.js":"12","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\styles.js":"13","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\styles.js":"14","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\styles.js":"15","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\styles.js":"16","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\Tables.js":"17","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\Maps.js":"18","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\Dashboard.js":"19","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\Header.js":"20","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\Icons.js":"21","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Wrappers\\Wrappers.js":"22","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\Sidebar.js":"23","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\styles.js":"24","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\styles.js":"25","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\styles.js":"26","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\styles.js":"27","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js":"28","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"29","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\Dot.js":"30","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\Notification.js":"31","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\styles.js":"32","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"33","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"34","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\styles.js":"35","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"36","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\genurl\\Genurl.js":"37","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\helpers\\index.js":"38","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\Animation.js":"39","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\settings\\Settings.js":"40","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\styles.js":"41","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\components\\UploadGif.js":"42","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\news\\News.js":"43","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\UploadService.js":"44","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\http_common\\HTTPCommon.js":"45","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\Sound.js":"46","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\mock.js":"47","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\components\\UploadMp3.js":"48","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\services\\UploadService.js":"49","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\MTable.js":"50","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\http_common\\HTTPCommon.js":"51"},{"size":509,"mtime":1635245772989,"results":"52","hashOfConfig":"53"},{"size":995,"mtime":1640886041381,"results":"54","hashOfConfig":"53"},{"size":1378,"mtime":1638431694535,"results":"55","hashOfConfig":"53"},{"size":534,"mtime":1635244042059,"results":"56","hashOfConfig":"53"},{"size":1626,"mtime":1635244042034,"results":"57","hashOfConfig":"53"},{"size":3932,"mtime":1640929440034,"results":"58","hashOfConfig":"53"},{"size":3128,"mtime":1640887654335,"results":"59","hashOfConfig":"53"},{"size":5790,"mtime":1635244042024,"results":"60","hashOfConfig":"53"},{"size":1909,"mtime":1635244042025,"results":"61","hashOfConfig":"53"},{"size":1396,"mtime":1635244042026,"results":"62","hashOfConfig":"53"},{"size":2581,"mtime":1635244042016,"results":"63","hashOfConfig":"53"},{"size":447,"mtime":1635244042004,"results":"64","hashOfConfig":"53"},{"size":710,"mtime":1640884919365,"results":"65","hashOfConfig":"53"},{"size":482,"mtime":1635244042005,"results":"66","hashOfConfig":"53"},{"size":1130,"mtime":1640890338332,"results":"67","hashOfConfig":"53"},{"size":1395,"mtime":1635244042036,"results":"68","hashOfConfig":"53"},{"size":235,"mtime":1640886622789,"results":"69","hashOfConfig":"53"},{"size":1010,"mtime":1635244042045,"results":"70","hashOfConfig":"53"},{"size":10208,"mtime":1640885757604,"results":"71","hashOfConfig":"53"},{"size":5572,"mtime":1640929304013,"results":"72","hashOfConfig":"53"},{"size":391433,"mtime":1635244042039,"results":"73","hashOfConfig":"53"},{"size":3892,"mtime":1635246370384,"results":"74","hashOfConfig":"53"},{"size":3391,"mtime":1640886161311,"results":"75","hashOfConfig":"53"},{"size":4043,"mtime":1640928469948,"results":"76","hashOfConfig":"53"},{"size":812,"mtime":1635244042041,"results":"77","hashOfConfig":"53"},{"size":178,"mtime":1635244042047,"results":"78","hashOfConfig":"53"},{"size":3241,"mtime":1640885794368,"results":"79","hashOfConfig":"53"},{"size":1077,"mtime":1640885776083,"results":"80","hashOfConfig":"53"},{"size":4160,"mtime":1636099247879,"results":"81","hashOfConfig":"53"},{"size":884,"mtime":1640885299203,"results":"82","hashOfConfig":"53"},{"size":3340,"mtime":1637858483136,"results":"83","hashOfConfig":"53"},{"size":1539,"mtime":1640885412362,"results":"84","hashOfConfig":"53"},{"size":4589,"mtime":1636363797530,"results":"85","hashOfConfig":"53"},{"size":1561,"mtime":1640885372783,"results":"86","hashOfConfig":"53"},{"size":1040,"mtime":1635244042003,"results":"87","hashOfConfig":"53"},{"size":1075,"mtime":1636099258530,"results":"88","hashOfConfig":"53"},{"size":6432,"mtime":1640885817967,"results":"89","hashOfConfig":"53"},{"size":1167,"mtime":1640885495370,"results":"90","hashOfConfig":"53"},{"size":18392,"mtime":1640927951293,"results":"91","hashOfConfig":"53"},{"size":15354,"mtime":1640890191754,"results":"92","hashOfConfig":"53"},{"size":534,"mtime":1637858483151,"results":"93","hashOfConfig":"53"},{"size":4102,"mtime":1640885663656,"results":"94","hashOfConfig":"53"},{"size":1532,"mtime":1640884122244,"results":"95","hashOfConfig":"53"},{"size":507,"mtime":1640884122260,"results":"96","hashOfConfig":"53"},{"size":176,"mtime":1640884122262,"results":"97","hashOfConfig":"53"},{"size":7869,"mtime":1640884122252,"results":"98","hashOfConfig":"53"},{"size":1906,"mtime":1640884122236,"results":"99","hashOfConfig":"53"},{"size":3475,"mtime":1640884122254,"results":"100","hashOfConfig":"53"},{"size":508,"mtime":1640884153890,"results":"101","hashOfConfig":"53"},{"size":3511,"mtime":1640884153896,"results":"102","hashOfConfig":"53"},{"size":176,"mtime":1640884153889,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1351p3q",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"106"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"106"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\index.js",[],["220","221"],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\App.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\context\\LayoutContext.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\index.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\Error.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\Layout.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\default.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\Charts.js",[],["222","223"],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\PageTitle.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\Tables.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\Maps.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\Dashboard.js",["224"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  LineChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n} from \"recharts\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport mock from \"./mock\";\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport BigStat from \"./components/BigStat/BigStat\";\r\n\r\nconst mainChartData = getMainChartData();\r\nconst PieChartData = [\r\n  { name: \"Group A\", value: 400, color: \"primary\" },\r\n  { name: \"Group B\", value: 300, color: \"secondary\" },\r\n  { name: \"Group C\", value: 300, color: \"warning\" },\r\n  { name: \"Group D\", value: 200, color: \"success\" },\r\n];\r\n\r\nexport default function Dashboard(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Dashboard\" button={<Button\r\n      variant=\"contained\"\r\n      size=\"medium\"\r\n      color=\"secondary\"\r\n    >\r\n        Latest Reports\r\n    </Button>} />\r\n      <Grid container spacing={4}>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Visits Today\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n              <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                12, 678\r\n              </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n              <LineChart\r\n                width={100}\r\n                height={30}\r\n                data={[\r\n                  { value: 10 },\r\n                  { value: 15 },\r\n                  { value: 10 },\r\n                  { value: 17 },\r\n                  { value: 18 },\r\n                ]}\r\n              >\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"value\"\r\n                  stroke={theme.palette.success.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                />\r\n              </LineChart>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Registrations\r\n                </Typography>\r\n                <Typography size=\"md\">860</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Sign Out\r\n                </Typography>\r\n                <Typography size=\"md\">32</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Rate\r\n                </Typography>\r\n                <Typography size=\"md\">3.25%</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"App Performance\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.performanceLegendWrapper}>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"warning\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  Integration\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"primary\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  SDK\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            <div className={classes.progressSection}>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                Integration\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={77}\r\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                SDK\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={73}\r\n                classes={{ barColorPrimary: classes.progressBarWarning }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Server Overview\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                60% / 37°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.secondary.main}\r\n                      fill={theme.palette.secondary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                54% / 31°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.primary.main}\r\n                      fill={theme.palette.primary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                57% / 21°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.warning.main}\r\n                      fill={theme.palette.warning.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6}>\r\n                <ResponsiveContainer width=\"100%\" height={144}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={PieChartData}\r\n                      innerRadius={30}\r\n                      outerRadius={40}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {PieChartData.map((entry, index) => (\r\n                        <Cell\r\n                          key={`cell-${index}`}\r\n                          fill={theme.palette[entry.color].main}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <div className={classes.pieChartLegendWrapper}>\r\n                  {PieChartData.map(({ name, value, color }, index) => (\r\n                    <div key={color} className={classes.legendItemContainer}>\r\n                      <Dot color={color} />\r\n                      <Typography style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\r\n                        &nbsp;{name}&nbsp;\r\n                      </Typography>\r\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                        &nbsp;{value}\r\n                      </Typography>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            bodyClass={classes.mainChartBody}\r\n            header={\r\n              <div className={classes.mainChartHeader}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                >\r\n                  Daily Line Chart\r\n                </Typography>\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"warning\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Tablet\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"primary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Mobile\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"secondary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Desktop\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <Select\r\n                  value={mainChartState}\r\n                  onChange={e => setMainChartState(e.target.value)}\r\n                  input={\r\n                    <OutlinedInput\r\n                      labelWidth={0}\r\n                      classes={{\r\n                        notchedOutline: classes.mainChartSelectRoot,\r\n                        input: classes.mainChartSelect,\r\n                      }}\r\n                    />\r\n                  }\r\n                  autoWidth\r\n                >\r\n                  <MenuItem value=\"daily\">Daily</MenuItem>\r\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                </Select>\r\n              </div>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\r\n              <ComposedChart\r\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\r\n                data={mainChartData}\r\n              >\r\n                <YAxis\r\n                  ticks={[0, 2500, 5000, 7500]}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <XAxis\r\n                  tickFormatter={i => i + 1}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <Area\r\n                  type=\"natural\"\r\n                  dataKey=\"desktop\"\r\n                  fill={theme.palette.background.light}\r\n                  strokeWidth={0}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"mobile\"\r\n                  stroke={theme.palette.primary.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"linear\"\r\n                  dataKey=\"tablet\"\r\n                  stroke={theme.palette.warning.main}\r\n                  strokeWidth={2}\r\n                  dot={{\r\n                    stroke: theme.palette.warning.dark,\r\n                    strokeWidth: 2,\r\n                    fill: theme.palette.warning.main,\r\n                  }}\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Widget>\r\n        </Grid>\r\n        {mock.bigStat.map(stat => (\r\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\r\n            <BigStat {...stat} />\r\n          </Grid>\r\n        ))}\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            title=\"Support Requests\"\r\n            upperTitle\r\n            noBodyPadding\r\n            bodyClass={classes.tableWidget}\r\n          >\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n// #######################################################################\r\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\r\n  var array = new Array(length).fill();\r\n  let lastValue;\r\n\r\n  return array.map((item, index) => {\r\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\r\n\r\n    while (\r\n      randomValue <= min ||\r\n      randomValue >= max ||\r\n      (lastValue && randomValue - lastValue > maxDiff)\r\n    ) {\r\n      randomValue = Math.floor(Math.random() * multiplier + 1);\r\n    }\r\n\r\n    lastValue = randomValue;\r\n\r\n    return { value: randomValue };\r\n  });\r\n}\r\n\r\nfunction getMainChartData() {\r\n  var resultArray = [];\r\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\r\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\r\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\r\n\r\n  for (let i = 0; i < tablet.length; i++) {\r\n    resultArray.push({\r\n      tablet: tablet[i].value,\r\n      desktop: desktop[i].value,\r\n      mobile: mobile[i].value,\r\n    });\r\n  }\r\n\r\n  return resultArray;\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\Header.js",["225","226"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\nimport {\r\n  StompSessionProvider,\r\n  useSubscription,\r\n} from \"react-stomp-hooks\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst notifications = [\r\n  { \r\n    color: \"warning\", \r\n    type: \"notification\",\r\n    message: \"Check out this awesome ticket\" \r\n  },\r\n  {\r\n    color: \"success\",\r\n    type: \"notification\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    color: \"primary\",\r\n    type: \"notification\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  const SubscribingComponent = () => {\r\n    const [notificationsMenu, setNotificationsMenu] = useState(null);\r\n    const [notificationsData, setNotificationsData] = useState([]);\r\n    const [unreadNotifications, setUnreadNotifications] = useState(0);\r\n\r\n    const classes = useStyles();\r\n    const layoutState = useLayoutState();\r\n    const layoutDispatch = useLayoutDispatch();\r\n\r\n    const onMessage = async (msg) => {\r\n      setNotificationsData((values) => {\r\n        let newData = [...values];\r\n        const obj = JSON.parse(msg.body);\r\n        newData.unshift({\r\n          color: \"primary\",\r\n          type: \"notification\",\r\n          message: obj.name + \" vừa donate \" + obj.money + \" đồng\",\r\n        });\r\n        if (newData.length > 5) {\r\n          newData.splice(newData.length - 1, 1);\r\n        }\r\n        return newData;\r\n      });\r\n      setUnreadNotifications(values => values + 1);\r\n    }\r\n  \r\n    useSubscription(\"/topic/message\", async (message) => await onMessage(message));\r\n    /*useEffect(() => {\r\n      setMessage(\"Cam on ban A da donate 100000 dong\");\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 200000 dong\"), 3000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 300000 dong\"), 6000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 400000 dong\"), 9000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 500000 dong\"), 12000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 600000 dong\"), 15000);\r\n    }, []);*/\r\n\r\n    return (\r\n      <AppBar position=\"fixed\" className={classes.appBar} style={{zIndex: \"1250\"}}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={() => toggleSidebar(layoutDispatch)}\r\n            className={classNames(\r\n              classes.headerMenuButtonSandwich,\r\n              classes.headerMenuButtonCollapse,\r\n            )}\r\n          >\r\n            {layoutState.isSidebarOpened ? (\r\n              <ArrowBackIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            ) : (\r\n              <MenuIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n          </IconButton>\r\n          <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n            Donation GIFs Webapp\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-haspopup=\"true\"\r\n            aria-controls=\"mail-menu\"\r\n            onClick={e => {\r\n              setNotificationsMenu(e.currentTarget);\r\n              if (unreadNotifications) setUnreadNotifications(0);\r\n            }}\r\n            className={classes.headerMenuButton}\r\n          >\r\n            <Badge\r\n              badgeContent={unreadNotifications ? unreadNotifications : null}\r\n              color=\"warning\"\r\n            >\r\n              <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n            </Badge>\r\n          </IconButton>\r\n          <Menu\r\n            id=\"notifications-menu\"\r\n            open={Boolean(notificationsMenu)}\r\n            anchorEl={notificationsMenu}\r\n            onClose={() => setNotificationsMenu(null)}\r\n            className={classes.headerMenu}\r\n            disableAutoFocusItem\r\n          >\r\n            {notificationsData.map(notification => (\r\n              <MenuItem\r\n                /*key={notification.id}*/\r\n                onClick={() => { setNotificationsMenu(null); setUnreadNotifications(0); }}\r\n                className={classes.headerMenuItem}\r\n              >\r\n                <Notification {...notification} typographyVariant=\"inherit\" />\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StompSessionProvider\r\n        url={\"https://web-donate.herokuapp.com/gs-guide-websocket\"}\r\n        debug={(str) => {\r\n            console.log(str);\r\n        }}\r\n    >\r\n      <SubscribingComponent />\r\n    </StompSessionProvider>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\Icons.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js",["227","228","229"],"import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableBody,\r\n  TableCell,\r\n  Chip\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../../styles\";\r\n\r\nconst states = {\r\n  sent: \"success\",\r\n  pending: \"warning\",\r\n  declined: \"secondary\",\r\n};\r\n\r\nexport default function TableComponent({ data }) {\r\n  const classes = useStyles();\r\n  var keys = Object.keys(data[0]).map(i => i.toUpperCase());\r\n  keys.shift(); // delete \"id\" key\r\n\r\n  return (\r\n    <Table className=\"mb-0\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {keys.map(key => (\r\n            <TableCell key={key}>{key}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {data.map(({ id, name, email, product, price, date, city, status }) => (\r\n          <TableRow key={id}>\r\n            <TableCell className=\"pl-3 fw-normal\">{name}</TableCell>\r\n            <TableCell>{email}</TableCell>\r\n            <TableCell>{product}</TableCell>\r\n            <TableCell>{price}</TableCell>\r\n            <TableCell>{date}</TableCell>\r\n            <TableCell>{city}</TableCell>\r\n            <TableCell>\r\n              <Chip label={status} classes={{root: classes[states[status.toLowerCase()]]}}/>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],["230","231"],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\Dot.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\genurl\\Genurl.js",["232","233","234","235","236","237","238","239","240","241","242"],"import { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport Zoom from '@material-ui/core/Zoom/Zoom';\r\nimport {\r\n    StompSessionProvider,\r\n    useSubscription,\r\n} from \"react-stomp-hooks\";\r\n\r\nimport { getSharingGif, getSharingTextStyleId, getSharingSound } from \"../../helpers\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\n\r\nconst SubscribingComponent = (props) => {\r\n    const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n    const [gifTexts, setGifTexts] = useState([]);\r\n    const [waiting, setWaiting] = useState(true);\r\n    const [savedGif, setSavedGif] = useState(\"\");\r\n    const [savedTextStyleId, setSavedTextStyleId] = useState(0);\r\n    const [savedSound, setSavedSound] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [messageQueue, setMessageQueue] = useState([]);\r\n    const [showAnimation, setShowAnimation] = useState(false);\r\n    const [countMessage, setCountMessage] = useState(0);\r\n    const [currentMessage, setCurrentMessage] = useState(0);\r\n    const [name, setName] = useState(\"\");\r\n    const [money, setMoney] = useState(0);\r\n    \r\n    const audio = useRef(null);\r\n    const speaking = useRef(null);\r\n\r\n    const sharingGif = getSharingGif();\r\n    const sharingTextStyleId = getSharingTextStyleId();\r\n    const sharingSound = getSharingSound();\r\n\r\n    const getGifTexts = async (text) => {\r\n        const res = await gf.animate(text, { limit: 16 })\r\n        setGifTexts(values => res.data);\r\n    }\r\n\r\n    const Item = (props) => {\r\n        return (\r\n            <div className=\"gif-item\">\r\n                <img src={props.url} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const TextList = (props) => {\r\n        const items = props.gifs.map((itemData, index) => {\r\n            if (index == (sharingTextStyleId ? sharingTextStyleId : savedTextStyleId))\r\n                return <Item url={itemData.url} />;\r\n            return <div></div>\r\n        });\r\n        return <div className=\"text-container\">{items}</div>;\r\n    };\r\n\r\n    const AnimatedText = () => {\r\n        return ( \r\n            <div class=\"content\">\r\n                <h1 class=\"text_shadows\" style={{ color: \"white\", fontWeight: \"bold\"}}>\r\n                    {/*text*/}\r\n                    Cảm ơn <mark style={{ background: \"none\", color: \"red\"}}>{name}</mark> đã donate <mark style={{ background: \"none\", color: \"red\"}}>{money}</mark> đồng!                \r\n                </h1>\r\n                <h1 class=\"text_shadows\" style={{ textShadow: \"none\", color: \"red\", fontWeight: \"bold\", fontSize: \"0.9rem\"}}>{content}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onMessage = (msg) => {\r\n        setCountMessage(values => values + 1);\r\n        setMessageQueue(values => {\r\n            const obj = JSON.parse(msg.body);\r\n            const text = \"Cảm ơn \" + obj.name + \" đã donate \" + obj.money + \" đồng\";\r\n            const content = '\" ' + obj.content + ' \"';\r\n            return [...values, {\r\n                id: countMessage,\r\n                content: content,\r\n                text: text,\r\n                name: obj.name,\r\n                money: obj.money\r\n            }];\r\n        });\r\n        //await getGifTexts(text);\r\n    }\r\n\r\n    useSubscription(\"/topic/message\", (message) => onMessage(message));\r\n\r\n    useEffect(() => {\r\n        if (!showAnimation) return;\r\n        audio.current = new Audio(sharingSound ? sharingSound : savedSound);\r\n        speaking.current = new Audio(`https://web-donate.herokuapp.com/text_to_speech?text=${content}`);\r\n        setTimeout(() => audio.current.play(), 1000);\r\n        setTimeout(() => audio.current.pause(), 4000);\r\n        setTimeout(() => speaking.current.play(), 4100);\r\n        setTimeout(() => setWaiting(false), 1000);\r\n        setTimeout(() => setWaiting(true), 11000);\r\n        setTimeout(() => setCurrentMessage(values => values + 1), 11000);\r\n        setTimeout(() => setShowAnimation(false), 11000);\r\n    }, [showAnimation]);\r\n\r\n    useEffect(() => {\r\n        //alert(currentMessage + \" \" + messageQueue.length);\r\n        if (currentMessage >= messageQueue.length) return;\r\n        if (showAnimation) return;\r\n        const message = messageQueue[currentMessage];\r\n        setContent(values => message.content);\r\n        setText(values => message.text);\r\n        setName(values => message.name);\r\n        setMoney(values => message.money);\r\n        setShowAnimation(true);\r\n    }, [currentMessage, messageQueue, showAnimation]);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                response.data.map(item => {\r\n                    if (item.id == 1) {\r\n                        setSavedGif(values => item.gifUrl);\r\n                        setSavedTextStyleId(values => item.textStyleId);\r\n                        setSavedSound(values => item.soundUrl);\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <> \r\n            <div style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"space-around\",\r\n                alignItems: \"center\",\r\n            }}>\r\n                <Zoom \r\n                    in={!waiting}\r\n                    timeout={{enter: 1500, exit: 200}}\r\n                >\r\n                    <div>\r\n                        <img src={sharingGif ? sharingGif : savedGif} /*width=\"300\" height=\"300\"*//>\r\n                    </div>\r\n                </Zoom>\r\n                <Zoom \r\n                    in={!waiting}\r\n                    timeout={{enter: 1500, exit: 200}}\r\n                >\r\n                    <div>\r\n                        <AnimatedText />\r\n                        {/*<TextList gifs={gifTexts} />*/}\r\n                    </div>\r\n                </Zoom>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function Genurl() {\r\n\r\n    return (\r\n        <>\r\n            <StompSessionProvider\r\n                url={\"https://web-donate.herokuapp.com/gs-guide-websocket\"}\r\n                debug={(str) => {\r\n                    console.log(str);\r\n                }}\r\n            >\r\n                <SubscribingComponent />\r\n            </StompSessionProvider>\r\n        </>\r\n    );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\helpers\\index.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\Animation.js",["243","244","245","246","247","248","249","250","251"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport ButtonBase from '@mui/material/ButtonBase';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport Box from '@mui/material/Box';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    LinearProgress,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport UploadGif from \"./components/UploadGif\";\r\nimport useStyles from \"./styles\";\r\nimport { setSharingGif, setSharingTextStyleId } from \"../../helpers\";\r\nimport UploadService from \"../../services/UploadService\";\r\nimport axios from 'axios';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n}));\r\n  \r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n            <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n                position: 'absolute',\r\n                right: 8,\r\n                top: 8,\r\n                color: (theme) => theme.palette.grey[500],\r\n            }}\r\n            >\r\n            <CloseIcon />\r\n            </IconButton>\r\n        ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst ImageButton = styled(ButtonBase)(({ theme }) => ({\r\n    position: 'relative',\r\n    height: 200,\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '100% !important', // Overrides inline-style\r\n      height: 100,\r\n    },\r\n    '&:hover, &.Mui-focusVisible': {\r\n      zIndex: 1,\r\n      '& .MuiImageBackdrop-root': {\r\n        opacity: 0.15,\r\n      },\r\n      '& .MuiImageMarked-root': {\r\n        opacity: 0,\r\n      },\r\n      '& .MuiTypography-root': {\r\n        border: '4px solid currentColor',\r\n      },\r\n    },\r\n}));\r\n\r\nconst ImageSrc = styled('span')({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center 40%',\r\n  });\r\n  \r\nconst Image = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    color: theme.palette.common.white,\r\n}));\r\n  \r\nconst ImageBackdrop = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundColor: theme.palette.common.black,\r\n    opacity: 0.4,\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nconst ImageMarked = styled('span')(({ theme }) => ({\r\n    height: 3,\r\n    width: 18,\r\n    backgroundColor: theme.palette.common.white,\r\n    position: 'absolute',\r\n    bottom: -2,\r\n    left: 'calc(50% - 9px)',\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nexport default function Animation() {\r\n    const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n    const [gifs, setGifs] = useState([]);\r\n    const [gifTexts, setGifTexts] = useState([]);\r\n    const [keyword, setKeyword] = useState(\"anime\");\r\n    const [loadingGifs, setLoadingGifs] = useState(false);\r\n    const [loadingGifTexts, setLoadingGifTexts] = useState(false);\r\n    const [openGifDialog, setOpenGifDialog] = useState(false);\r\n    const [openTextStyleDialog, setOpenTextStyleDialog] = useState(false);\r\n    const [focusGif, setFocusGif] = useState(\"\");\r\n    const [focusTextStyle, setFocusTextStyle] = useState(\"\");\r\n    const [focusTextStyleId, setFocusTextStyleId] = useState(0);\r\n    const [choosingGif, setChoosingGif] = useState(\"\");\r\n    const [choosingTextStyleId, setChoosingTextStyleId] = useState(\"\");\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [uploadedGifs, setUploadedGifs] = useState(undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    const [savedSound, setSavedSound] = useState(\"\");\r\n\r\n    const handleOpenGifDialog = (url) => {\r\n        setFocusGif(url);\r\n        setOpenGifDialog(true);\r\n    };\r\n\r\n    const handleOpenTextStyleDialog = (url, id) => {\r\n        setFocusTextStyle(url);\r\n        setFocusTextStyleId(id);\r\n        setOpenTextStyleDialog(true);\r\n    };\r\n      \r\n    const handleCloseGifDialog = () => {\r\n        setOpenGifDialog(false);\r\n    };\r\n\r\n    const handleCloseTextStyleDialog = () => {\r\n        setOpenTextStyleDialog(false);\r\n    };\r\n\r\n    const handleChooseGif = () => {\r\n        setChoosingGif(focusGif);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const handleChooseTextStyle = () => {\r\n        setChoosingTextStyleId(focusTextStyleId);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const GifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const id = item.url.split('-').pop();\r\n                        const url = \"https://media.giphy.com/media/\" + id + \"/giphy.gif\";\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const GifTextsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item, index) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenTextStyleDialog(url, index)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const UploadedGifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const getGifs = async (keyword) => {\r\n        const res = await gf.search(keyword, { limit: 32 });\r\n        setGifs(values => res.data);\r\n        setTimeout(() => setLoadingGifs(false), 1000);\r\n    }\r\n\r\n    const getGifTexts = async (text) => {\r\n        const res = await gf.animate(text, { limit: 32 })\r\n        setGifTexts(values => res.data);\r\n        setTimeout(() => setLoadingGifTexts(false), 1000);\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setKeyword(event.target.value);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setSharingGif(choosingGif);\r\n        setSharingTextStyleId(choosingTextStyleId);\r\n        setOpenSnackbar(true);\r\n\r\n        axios.post(\"https://web-donate.herokuapp.com/setting\", {\r\n            id: 1,\r\n            gifUrl: choosingGif,\r\n            textStyleId: choosingTextStyleId,\r\n            soundUrl: savedSound,\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLoadingGifs(values => true);\r\n        getGifs(keyword);\r\n        setLoadingGifTexts(values => true);\r\n        getGifTexts(keyword);\r\n    }, [keyword]);\r\n\r\n    useEffect(() => {\r\n        UploadService.getGifFiles()\r\n          .then((response) => {\r\n            setUploadedGifs((values) => response.data);\r\n          })\r\n          .catch((error) => console.log(error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                response.data.map(item => {\r\n                    if (item.id == 1) {\r\n                        setSavedSound(values => item.soundUrl);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle title=\"Animation Settings\"/>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <div style={{width: \"50%\"}}>\r\n                        <TextField \r\n                            label=\"Search by keyword\" \r\n                            color=\"primary\" \r\n                            variant=\"outlined\" \r\n                            size=\"small\" \r\n                            fullWidth \r\n                            focused \r\n                            value={keyword}\r\n                            onChange={handleInputChange}\r\n                            spellCheck=\"false\"\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifs && (<GifsList gifs={gifs} />)}\r\n                        {!!loadingGifs && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>\r\n                {/*<Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Text Style\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifTexts && (<GifTextsList gifs={gifTexts} />)}\r\n                        {!!loadingGifTexts && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>*/}\r\n                {uploadedGifs && (\r\n                    <Grid item container xs={12} spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                                Choose Your Uploaded Gif\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <UploadedGifsList gifs={uploadedGifs}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                )}\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Upload your Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UploadGif />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div \r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={handleSave}>\r\n                            Save settings\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <BootstrapDialog\r\n                onClose={handleCloseGifDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openGifDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseGifDialog}>\r\n                    Preview gif\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusGif} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseGif(); handleCloseGifDialog(); }}>\r\n                    Choose this gif\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <BootstrapDialog\r\n                onClose={handleCloseTextStyleDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openTextStyleDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseTextStyleDialog}>\r\n                    Preview text style\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusTextStyle} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseTextStyle(); handleCloseTextStyleDialog(); }}>\r\n                    Choose this text style\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Snackbar open={openSnackbar} autoHideDuration={1000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\r\n                    Successfully saved your choice!\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\settings\\Settings.js",["252","253","254","255"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Settings.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NumberFormat from 'react-number-format';\r\nimport Slider from \"@mui/material/Slider\";\r\nimport Typography from '@mui/material/Typography';\r\nimport  Button from '@material-ui/core/Button';\r\nimport classNames from 'classnames';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport axios from 'axios';\r\nconst useStyles = makeStyles((theme) => ({\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: '#e3e8eb !important'\r\n    }\r\n  },\r\n  notchedOutline: {\r\n    // height:'50px',\r\n    borderWidth: '0.25px',\r\n    borderColor: '#e3e8eb !important'\r\n  },\r\n  multilineColor:{\r\n    color:'white'\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  root1: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1.8),\r\n    color: 'white',\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  Bar: {\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  root2: {\r\n    '& > *': {\r\n      width: '25ch',\r\n    },\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  bootstrapRoot: {\r\n    boxShadow: 'none',\r\n    textTransform: 'none',\r\n    fontSize: 16,\r\n    padding: '6px 12px',\r\n    border: '1px solid',\r\n    lineHeight: 1.5,\r\n    backgroundColor: '#007bff',\r\n    borderColor: '#007bff',\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:hover': {\r\n      backgroundColor: '#0069d9',\r\n      borderColor: '#0062cc',\r\n    },\r\n    '&:active': {\r\n      boxShadow: 'none',\r\n      backgroundColor: '#0062cc',\r\n      borderColor: '#005cbf',\r\n    },\r\n    '&:focus': {\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\r\n    },\r\n  },\r\n\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n//-------SaveSettings---------\r\nfunction NodeSave({dataSave}) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [min, setMin] = React.useState(1000);\r\n  const [max, setMax] = React.useState(1000);\r\n  React.useEffect(() => {\r\n    axios.get(settingsAPI)\r\n      .then(res => {\r\n        if(dataSave.IdData==1){ setMin(0);}\r\n        else {setMin(res.data[dataSave.IdData-2].money);};\r\n        if(dataSave.IdData==res.data.length) setMax(100000000000000000000000000000);\r\n        else setMax(res.data[dataSave.IdData].money);\r\n      });\r\n  }, []);\r\n  const handleClickVariant = (variant) => () => {\r\n        if(dataSave.values1>min){\r\n          enqueueSnackbar('Successfully saved!', { variant });\r\n          SaveData();\r\n          }\r\n          else{\r\n            enqueueSnackbar('Illegal Min Amount!', { variant });\r\n          }\r\n  };\r\n  function SaveData(){\r\n    axios.put(`${settingsAPI}`, {\r\n        id: dataSave.IdData,\r\n        money: dataSave.values1 ,\r\n        shopTopDonation: dataSave.values2,\r\n        template: dataSave.values3,\r\n        alertDuration: dataSave.values4, \r\n        alertTextDelay :dataSave.values5\r\n      });\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        onClick={dataSave.values1>min&&dataSave.values1<max?handleClickVariant('success'):handleClickVariant('error')}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        disableRipple\r\n        className={classNames(classes.margin, classes.bootstrapRoot)}\r\n        >\r\n        SAVE SETTINGS\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction SaveSettings({DataSave}) {\r\n  return (\r\n    <SnackbarProvider maxSnack={3}>\r\n      <NodeSave  dataSave={DataSave} />\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n//--------FormRow---------------------------------\r\n  const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {\r\n    const { onChange, ...other } = props;\r\n  \r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={ref}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        thousandSeparator\r\n        isNumericString\r\n        prefix=\"$\"\r\n      />\r\n    );\r\n  });\r\n  \r\n  NumberFormatCustom.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };\r\nfunction NestedGrid({data}) {\r\n  const classes = useStyles();\r\n  // const [values, setValues] = React.useState('1320');\r\n  // const [values1, setValues1] = React.useState('100');\r\n  var [values, setValues] = React.useState({\r\n      values1: data.money  ,\r\n      values2: data.shopTopDonation,\r\n      values3: data.template,\r\n      values4: data.alertDuration, \r\n      values5 :data.alertTextDelay,\r\n      IdData :data.id\r\n  });\r\n  var handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  return (\r\n    <div className={classes.root1}>\r\n      <Grid container spacing={5}>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Min Amount</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n        <div /*className={classes.root2}*/>\r\n          <Box>\r\n            <TextField\r\n              className=\"borderText\"\r\n              variant=\"outlined\"\r\n              value={values.values1}\r\n              // onChange={(event) =>setValuess(event.target.value)}\r\n              onChange={handleChange('values1')}\r\n              name=\"numberformat\"\r\n              id=\"formatted-numberformat-input\"\r\n              InputProps={{\r\n                inputComponent: NumberFormatCustom,\r\n                classes: {\r\n                  root: classes.cssOutlinedInput,\r\n                  notchedOutline: classes.notchedOutline,\r\n                  input: classes.multilineColor\r\n                },\r\n              }}\r\n            />\r\n          </Box>\r\n        </div>\r\n        </Grid>\r\n        <Grid item xs={1} style={{display: \"flex\", alignItems: \"center\"}}>\r\n          <Tooltip\r\n            title=\"The smallest a donation can be for the donation alert to be displayed. This is useful if you only want the donation alert to be displayed for larger amounts. Remember, this is the amount donated in the amount donated in the currency you have selected in the donation settings section. Setting this to 0 will make every donation alert be displayed.\"\r\n            arrow>\r\n            <HelpIcon color=\"action\" />\r\n          </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Show Donation</Paper>\r\n        </Grid>\r\n        <Grid item xs={1.2}>\r\n        <FormControl component=\"fieldset\">\r\n      <RadioGroup\r\n        aria-label=\"gender\"\r\n        name=\"controlled-radio-buttons-group\"\r\n        value={values.values2}\r\n        onChange={handleChange('values2')}\r\n      >\r\n        <FormControlLabel value='false' control={<Radio />} label=\"  Disabled\" />\r\n        <FormControlLabel value='true' control={<Radio />} label=\"  Enabled\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n        </Grid>\r\n        <Grid item xs={1} style={{display: \"flex\", alignItems: \"center\"}}>\r\n        <Tooltip title=\"Is it possible to show notifications on the screen?\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Message Template</Paper>\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n        <TextField \r\n        className=\"borderText\"\r\n        variant=\"outlined\" \r\n        type=\"text\" id=\"MessageTemplate\"\r\n        name=\"MessageTemplate\" \r\n        // defaultValue = \"{name} donated {amount}!\" \r\n        // defaultValue = {data.MessageTemplate}\r\n        value={values.values3}\r\n        onChange={handleChange('values3')}\r\n        InputProps={{\r\n          classes: {\r\n            root: classes.cssOutlinedInput,\r\n            notchedOutline: classes.notchedOutline,\r\n            input: classes.multilineColor\r\n          },\r\n        }}\r\n        />\r\n        </Grid>\r\n        <Grid item xs={1} style={{display: \"flex\", alignItems: \"center\"}}>\r\n          <Tooltip \r\n            title=\"When a donation alert shows up, this will be the format of the message. Available Tokens, {name} The name of the donator, {amount} The amount that was donated\" \r\n            arrow>\r\n            <HelpIcon color=\"action\" />\r\n          </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Alert Duration</Paper>\r\n        </Grid>\r\n        <Grid className=\"SliderAlert\" item xs={8}>\r\n            <Slider \r\n              max=\"30\"\r\n              // defaultValue={data.AlertDuration}\r\n              value={values.values4}\r\n              onChange={handleChange('values4')}\r\n              aria-label=\"Default\" \r\n              valueLabelDisplay=\"on\" \r\n            />\r\n        </Grid>\r\n        <Grid item xs={1} style={{display: \"flex\", alignItems: \"center\"}}>\r\n        <Tooltip title=\"How many seconds to show this alert before hiding it.\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Alert Text Delay</Paper>\r\n        </Grid>\r\n        <Grid className=\"SliderAlert\" item xs={8}>\r\n          <Slider\r\n            max=\"30\"\r\n            size=\"big\"\r\n            defaultValue={data.AlertTextDelay}\r\n            value={values.values5}\r\n            onChange={handleChange('values5')}\r\n            aria-label=\"Default\" \r\n            valueLabelDisplay=\"on\" \r\n          />\r\n        </Grid>\r\n        <Grid item xs={1} style={{display: \"flex\", alignItems: \"center\"}}>\r\n        <Tooltip title=\"How many seconds after your image/video/audios to show the alert text. This is useful if you want to wait a few seconds for an animation to finish before your alert text appears.\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment >\r\n        \r\n        <Grid \r\n          className=\"ButtonSave\"\r\n          item xs={12} >\r\n          <SaveSettings\r\n            DataSave={values}\r\n          />\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n//-----Ghep API--------\r\nvar settingsAPI =\"https://web-donate.herokuapp.com/setting\";\r\n\r\nfunction SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [functionIsRunning,setFunctionIsRunning]=React.useState(false);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n const [DataSettings, setDataSettings] = React.useState([]);\r\n function GetDataSettings() {\r\n    axios.get(settingsAPI)\r\n      .then(res => {\r\n        setDataSettings(res.data);\r\n      })\r\n  };\r\n  React.useEffect(() => {\r\n    axios.get(settingsAPI)\r\n      .then(res => {\r\n        setDataSettings(res.data);\r\n      });\r\n  }, []);\r\n  function handleAddLevel() {\r\n    if (!functionIsRunning) {\r\n      setFunctionIsRunning(true);\r\n      axios.post(settingsAPI, {\r\n        id:DataSettings.length+1,\r\n        template:\"{name} donated {amount}!\",\r\n        alertDuration: 3, \r\n        alertTextDelay :1\r\n    })\r\n    .then(function(){GetDataSettings();})\r\n    .then(function(){setTimeout(() => setFunctionIsRunning(false), 900);});\r\n    \r\n    }\r\n  };\r\n  function deletePost() {\r\n    if (!functionIsRunning) {\r\n      setFunctionIsRunning(true);\r\n    if(DataSettings.length!=1){\r\n    axios({ method: 'delete', url: `${settingsAPI}`, data:DataSettings.length, headers: {\r\n      'Content-Type': 'application/json; charset=utf-8'\r\n    }})\r\n    .then(function(){GetDataSettings();})\r\n    .then(function(){setTimeout(() => setFunctionIsRunning(false), 900);});\r\n    };\r\n    };\r\n  };\r\n  return (\r\n    <div className={classes.root} >\r\n      <AppBar className={classes.Bar} position=\"static\">\r\n        <Tabs aria-label=\"simple tabs example\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        variant=\"scrollable\"\r\n        scrollButtons\r\n        allowScrollButtonsMobile\r\n        textColor='inherit'\r\n        >\r\n          {DataSettings.map(function(DataSetting){\r\n            const Label= \"Donation Level \"+(DataSetting.id);\r\n            return(\r\n            <Tab\r\n            onClick={GetDataSettings}\r\n            label={Label} {...a11yProps(DataSetting.id-1)} />\r\n          );})\r\n          }\r\n          <IconButton color=\"primary\"\r\n          onClick={deletePost}\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n          <IconButton color=\"primary\"\r\n          onClick={handleAddLevel}\r\n          >\r\n            <AddOutlinedIcon />\r\n          </IconButton>\r\n        </Tabs>\r\n      </AppBar>\r\n      {DataSettings.map(DataSetting=>(\r\n      <TabPanel value={value} index={DataSetting.id-1}>\r\n        <NestedGrid data={DataSetting} onClick={GetDataSettings} />\r\n      </TabPanel>))\r\n    }\r\n    </div>\r\n  );\r\n}\r\nexport default function Settings(){\r\n  return(\r\n    <>\r\n      <PageTitle title=\"General Settings\"/>\r\n      <div id=\"Body\">\r\n        <SimpleTabs />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\components\\UploadGif.js",["256"],"import { useState, useEffect } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Grid, Box, Typography, Button, withStyles } from '@material-ui/core';\r\n\r\nimport UploadService from \"../../../services/UploadService\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nexport default function UploadGif() {\r\n  const [state, setState] = useState({\r\n    currentFile: undefined,\r\n    previewGif: undefined,\r\n    progress: 0,\r\n    message: \"\",\r\n    isError: false,\r\n  });\r\n\r\n  const onSelectFile = (event) => {\r\n    setState(values => ({\r\n      ...values,\r\n      currentFile: event.target.files[0],\r\n      previewGif: URL.createObjectURL(event.target.files[0]),\r\n      progress: 0,\r\n      message: \"\",\r\n    }));\r\n  };\r\n\r\n  const onUpload = () => {\r\n    setState(values => ({\r\n      ...values,\r\n      progress: 0,\r\n    }));\r\n\r\n    UploadService.upload(state.currentFile, (event) => {\r\n      setState(values => ({\r\n        ...values,\r\n        progress: Math.round((100 * event.loaded) / event.total),\r\n      }));\r\n    })\r\n      .then((response) => {\r\n        setState(values => ({\r\n          ...values,\r\n          message: response.data.message + \". Reload the page to see the result!\",\r\n          isError: false,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        setState(values => ({\r\n          ...values,\r\n          progress: 0,\r\n          message: \"Could not upload the gif!\",\r\n          currentFile: undefined,\r\n          isError: true\r\n        }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onSelectFile} />\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" >\r\n                Choose your Gif\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"file-name\">\r\n            {state.currentFile ? state.currentFile.name : null}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            className=\"btn-upload\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            component=\"span\"\r\n            disabled={!state.currentFile}\r\n            onClick={onUpload}>\r\n            Upload\r\n          </Button>\r\n        </Grid>\r\n        {state.message && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" className={`upload-message ${state.isError ? \"error\" : \"\"}`}>\r\n              {state.message}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          {state.currentFile && (\r\n            <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\r\n              <Box width=\"100%\" mr={1}>\r\n                <BorderLinearProgress variant=\"determinate\" value={state.progress} />\r\n              </Box>\r\n              <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${state.progress}%`}</Typography>\r\n              </Box>\r\n            </Box>)\r\n          }\r\n        </Grid>\r\n        {state.previewGif && (\r\n          <Grid item container xs={12} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                Preview Gif\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                <img className=\"preview my20\" src={state.previewGif} alt=\"\" width=\"350\"/>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\news\\News.js",["257","258","259","260","261","262","263"],"import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function News() {\r\n    const [color, setColor] = useState(\"black\");\r\n    const [speed, setSpeed] = useState(20);\r\n    const [year, setYear] = useState(2021);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://web-donate.herokuapp.com/donate/total_donate_by_year?year=${year}`)\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                let donateInfo = \"Thống kê số tiền donate đã nhận được trong năm \" + year + \": \";\r\n                response.data.map((item, id) => {\r\n                    donateInfo += \"tháng \" + item.month + \" - \" + item.total_donate + \" đồng\";\r\n                    if (id != 11) donateInfo += \" | \";\r\n                    return item;\r\n                });\r\n                setText(donateInfo);\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <marquee\r\n                style={{\r\n                    background: \"linear-gradient(#E89B00, #FFBC00, #FFDE5D)\",\r\n                    color: color,\r\n                    fontSize: \"3vh\",\r\n                    borderStyle: \"double\",\r\n                    border: \"2px solid gray\",\r\n                    fontWeight: \"bold\",\r\n                    fontStyle: \"italic\",\r\n                }}\r\n                scrolldelay={speed}\r\n            >\r\n                {text}\r\n            </marquee>\r\n        </>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\UploadService.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\http_common\\HTTPCommon.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\Sound.js",["264","265","266","267"],"import React, { useState, useEffect } from 'react';\r\nimport './styles.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport VolumeDown from '@material-ui/icons/VolumeDown';\r\nimport VolumeUp from '@material-ui/icons/VolumeUp';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PageTitle from \"../../components/PageTitle\";\r\n\r\nimport UploadMp3 from \"./components/UploadMp3\";\r\nimport UploadService from '../../services/UploadService';\r\nimport { setSharingSound } from '../../helpers';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport AudioPlayer from 'material-ui-audio-player';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst muiTheme = createMuiTheme({});\r\n\r\n//-----------------------------------------\r\nconst useStyles0 = makeStyles({\r\n  root: {\r\n    width: 500,\r\n  },\r\n});\r\n\r\nfunction ContinuousSlider() {\r\n  const classes = useStyles0();\r\n  const [value, setValue] = React.useState(30);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"continuous-slider\" gutterBottom>\r\n        Volume\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <VolumeDown />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider value={value} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <VolumeUp />\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n//-----------------------------------------\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction ContainedButtons() {\r\n  const classes = useStyles1();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button variant=\"contained\">Speak</Button>\r\n      <Button variant=\"contained\" startIcon = {<SaveIcon />}>\r\n        Save settings\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n//-----------------------------------------\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '50ch',\r\n      \r\n    },\r\n  },\r\n}));\r\n\r\nfunction BasicTextFields() {\r\n  const classes = useStyles2();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField \r\n        id=\"outlined-basic\" \r\n        label=\"Type something to test speaking voice\" \r\n        variant=\"outlined\" \r\n        color = \"primary\" />\r\n    </form>\r\n  );\r\n}\r\n\r\n//-----------------------------------------\r\nconst voices = [\r\n  {\r\n    value: 'VNFMV',\r\n    label: 'Vietnamese Female Voice',\r\n  },\r\n  {\r\n    value: 'VNMV',\r\n    label: 'Vietnamese Male Voice',\r\n  },\r\n];\r\nconst useStyles3 = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\nfunction MultilineTextFields() {\r\n  const classes = useStyles3();\r\n  const [voice, setVoice] = React.useState('VNFMV');\r\n\r\n  const handleChange = (event) => {\r\n    setVoice(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <div>\r\n      <TextField\r\n          id=\"outlined-select-currency-native\"\r\n          select\r\n          label=\"Choose Voice\"\r\n          value={voice}\r\n          onChange={handleChange}\r\n          SelectProps={{\r\n            native: true,\r\n          }}\r\n          helperText=\"Please select your preference voice\"\r\n          variant=\"outlined\"\r\n        >\r\n          {voices.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n      </div>\r\n    </form>\r\n    );\r\n  }\r\n\r\n//-----------------------------------------\r\nfunction Sound() {\r\n  const [uploadedFiles, setUploadedFiles] = useState(undefined);\r\n  const [choosingSound, setChoosingSound] = useState(\"\");\r\n  const [savedGif, setSavedGif] = useState(\"\");\r\n  const [savedTextStyleId, setSavedTextStyleId] = useState(0); \r\n\r\n  const handleClick = (url) => {\r\n    alert(\"Chọn thành công!\");\r\n    setChoosingSound(values => url);\r\n  }\r\n\r\n  const handleSave = () => {\r\n    alert(\"Lưu thành công!\");\r\n    setSharingSound(choosingSound);\r\n\r\n    axios.post(\"https://web-donate.herokuapp.com/setting\", {\r\n        id: 1,\r\n        gifUrl: savedGif,\r\n        textStyleId: savedTextStyleId,\r\n        soundUrl: choosingSound,\r\n    })\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  const UploadedFilesList = (props) => {\r\n    const items = props.files.map(item => (\r\n      <Grid container item xs={12}>\r\n        <Grid item xs={10}>\r\n          <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <ThemeProvider theme={muiTheme}>\r\n              <AudioPlayer width=\"90%\" src={item.url} />\r\n            </ThemeProvider>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button onClick={() => handleClick(item.url)} variant=\"contained\">\r\n            Choose\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    ));\r\n    return (\r\n      <Grid container spacing={5}>{items}</Grid>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    UploadService.getMp3Files()\r\n      .then((response) => {\r\n        setUploadedFiles((values) => response.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n    .then(response => {\r\n        if (response.status == \"200\") {\r\n            response.data.map(item => {\r\n                if (item.id == 1) {\r\n                    setSavedGif(values => item.gifUrl);\r\n                    setSavedTextStyleId(values => item.textStyleId);\r\n                }\r\n            })\r\n        }\r\n    })\r\n    .catch(error => console.log(error));\r\n}, []);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Sound Settings\"/>\r\n      <Grid container spacing={4}>\r\n        <Grid container item spacing={4} xs={12}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                Speaking Voice Settings\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                Test your speaking voice\r\n                <BasicTextFields />\r\n                <ContinuousSlider />\r\n                <ContainedButtons />\r\n                <MultilineTextFields />\r\n              </header>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        {uploadedFiles && (\r\n          <Grid container item xs={12} spacing={4}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                  Choose Your Uploaded Alert Sound\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <UploadedFilesList files={uploadedFiles}/>\r\n              </Grid>\r\n          </Grid>\r\n        )}\r\n        <Grid container item spacing={4} xs={12}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n              Upload Your Alert Sound\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <UploadMp3 />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <div \r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n            }}\r\n        >\r\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={handleSave}>\r\n                Save settings\r\n            </Button>\r\n        </div>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sound;","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\mock.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\components\\UploadMp3.js",["268"],"import { useState, useEffect } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Grid, Box, Typography, Button, withStyles } from '@material-ui/core';\r\n\r\nimport UploadService from \"../../../services/UploadService\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nexport default function UploadGif() {\r\n  const [state, setState] = useState({\r\n    currentFile: undefined,\r\n    progress: 0,\r\n    message: \"\",\r\n    isError: false,\r\n  });\r\n\r\n  const onSelectFile = (event) => {\r\n    setState(values => ({\r\n      ...values,\r\n      currentFile: event.target.files[0],\r\n      progress: 0,\r\n      message: \"\",\r\n    }));\r\n  };\r\n\r\n  const onUpload = () => {\r\n    setState(values => ({\r\n      ...values,\r\n      progress: 0,\r\n    }));\r\n\r\n    UploadService.upload(state.currentFile, (event) => {\r\n      setState(values => ({\r\n        ...values,\r\n        progress: Math.round((100 * event.loaded) / event.total),\r\n      }));\r\n    })\r\n      .then((response) => {\r\n        setState(values => ({\r\n          ...values,\r\n          message: response.data.message + \". Reload the page to see the result!\",\r\n          isError: false,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        setState(values => ({\r\n          ...values,\r\n          progress: 0,\r\n          message: \"Could not upload file!\",\r\n          currentFile: undefined,\r\n          isError: true\r\n        }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onSelectFile} />\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" >\r\n                Choose your Mp3 file\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"file-name\">\r\n            {state.currentFile ? state.currentFile.name : null}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            className=\"btn-upload\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            component=\"span\"\r\n            disabled={!state.currentFile}\r\n            onClick={onUpload}>\r\n            Upload\r\n          </Button>\r\n        </Grid>\r\n        {state.message && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" className={`upload-message ${state.isError ? \"error\" : \"\"}`}>\r\n              {state.message}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          {state.currentFile && (\r\n            <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\r\n              <Box width=\"100%\" mr={1}>\r\n                <BorderLinearProgress variant=\"determinate\" value={state.progress} />\r\n              </Box>\r\n              <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${state.progress}%`}</Typography>\r\n              </Box>\r\n            </Box>)\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\services\\UploadService.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\MTable.js",["269"],"import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport axios from 'axios';\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  container: {\r\n    maxHeight: 1000\r\n  }\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white\r\n  },\r\n  body: {\r\n    fontSize: 14\r\n  }\r\n}))(TableCell);\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover\r\n    }\r\n  }\r\n}))(TableRow);\r\n\r\nconst Presentation = ({users}) => {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"left\">NameID_Momo</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Money</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Date</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {users\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((user) => {\r\n                return (\r\n                  <StyledTableRow key={user.id}>\r\n\r\n                    <StyledTableCell align=\"left\">{user.nameID_Momo}</StyledTableCell>\r\n                    <StyledTableCell align=\"left\">\r\n                      {user.money}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"left\">\r\n                      {user.day}/{user.month}/{user.year}\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10]}\r\n        component=\"div\"\r\n        count={users.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\nfunction MTable() {\r\n  const reverse = ([head, ...tail]) => \r\n    tail.length === 0\r\n        ? [head]                       // Base case -- cannot reverse a single element.\r\n        : [...reverse(tail), head] \r\n  const [USERS, setUSERS] = React.useState([]);\r\n  React.useEffect(() => {\r\n    axios.get('https://web-donate.herokuapp.com/donate/data_all_momo_donate')\r\n      .then(res => {\r\n        setUSERS(reverse(res.data));\r\n      });\r\n  }, []);\r\n\r\n    return (\r\n      <div>\r\n        <Presentation users={USERS} />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MTable;\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\http_common\\HTTPCommon.js",[],{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"270","replacedBy":"274"},{"ruleId":"272","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":1,"column":17,"nodeType":"278","messageId":"279","endLine":1,"endColumn":25},{"ruleId":"276","severity":1,"message":"280","line":1,"column":17,"nodeType":"278","messageId":"279","endLine":1,"endColumn":26},{"ruleId":"276","severity":1,"message":"281","line":35,"column":7,"nodeType":"278","messageId":"279","endLine":35,"endColumn":20},{"ruleId":"276","severity":1,"message":"282","line":8,"column":3,"nodeType":"278","messageId":"279","endLine":8,"endColumn":7},{"ruleId":"276","severity":1,"message":"283","line":12,"column":7,"nodeType":"278","messageId":"279","endLine":12,"endColumn":13},{"ruleId":"276","severity":1,"message":"284","line":19,"column":9,"nodeType":"278","messageId":"279","endLine":19,"endColumn":16},{"ruleId":"270","replacedBy":"285"},{"ruleId":"272","replacedBy":"286"},{"ruleId":"276","severity":1,"message":"287","line":15,"column":12,"nodeType":"278","messageId":"279","endLine":15,"endColumn":20},{"ruleId":"276","severity":1,"message":"288","line":21,"column":12,"nodeType":"278","messageId":"279","endLine":21,"endColumn":16},{"ruleId":"276","severity":1,"message":"289","line":36,"column":11,"nodeType":"278","messageId":"279","endLine":36,"endColumn":22},{"ruleId":"290","severity":1,"message":"291","line":44,"column":17,"nodeType":"292","endLine":44,"endColumn":40},{"ruleId":"276","severity":1,"message":"293","line":49,"column":11,"nodeType":"278","messageId":"279","endLine":49,"endColumn":19},{"ruleId":"294","severity":1,"message":"295","line":51,"column":23,"nodeType":"296","messageId":"297","endLine":51,"endColumn":25},{"ruleId":"298","severity":1,"message":"299","line":100,"column":8,"nodeType":"300","endLine":100,"endColumn":23,"suggestions":"301"},{"ruleId":"294","severity":1,"message":"295","line":117,"column":33,"nodeType":"296","messageId":"297","endLine":117,"endColumn":35},{"ruleId":"302","severity":1,"message":"303","line":118,"column":40,"nodeType":"304","messageId":"305","endLine":118,"endColumn":42},{"ruleId":"294","severity":1,"message":"295","line":119,"column":33,"nodeType":"296","messageId":"297","endLine":119,"endColumn":35},{"ruleId":"290","severity":1,"message":"291","line":143,"column":25,"nodeType":"292","endLine":143,"endColumn":101},{"ruleId":"276","severity":1,"message":"287","line":141,"column":12,"nodeType":"278","messageId":"279","endLine":141,"endColumn":20},{"ruleId":"276","severity":1,"message":"306","line":144,"column":12,"nodeType":"278","messageId":"279","endLine":144,"endColumn":27},{"ruleId":"276","severity":1,"message":"307","line":230,"column":11,"nodeType":"278","messageId":"279","endLine":230,"endColumn":23},{"ruleId":"298","severity":1,"message":"308","line":354,"column":8,"nodeType":"300","endLine":354,"endColumn":17,"suggestions":"309"},{"ruleId":"294","severity":1,"message":"295","line":367,"column":33,"nodeType":"296","messageId":"297","endLine":367,"endColumn":35},{"ruleId":"302","severity":1,"message":"303","line":368,"column":40,"nodeType":"304","messageId":"305","endLine":368,"endColumn":42},{"ruleId":"294","severity":1,"message":"295","line":369,"column":33,"nodeType":"296","messageId":"297","endLine":369,"endColumn":35},{"ruleId":"290","severity":1,"message":"291","line":463,"column":21,"nodeType":"292","endLine":463,"endColumn":53},{"ruleId":"290","severity":1,"message":"291","line":480,"column":21,"nodeType":"292","endLine":480,"endColumn":59},{"ruleId":"294","severity":1,"message":"295","line":147,"column":27,"nodeType":"296","messageId":"297","endLine":147,"endColumn":29},{"ruleId":"294","severity":1,"message":"295","line":149,"column":27,"nodeType":"296","messageId":"297","endLine":149,"endColumn":29},{"ruleId":"298","severity":1,"message":"310","line":152,"column":6,"nodeType":"300","endLine":152,"endColumn":8,"suggestions":"311"},{"ruleId":"294","severity":1,"message":"312","line":436,"column":27,"nodeType":"296","messageId":"297","endLine":436,"endColumn":29},{"ruleId":"276","severity":1,"message":"280","line":1,"column":20,"nodeType":"278","messageId":"279","endLine":1,"endColumn":29},{"ruleId":"276","severity":1,"message":"313","line":5,"column":19,"nodeType":"278","messageId":"279","endLine":5,"endColumn":27},{"ruleId":"276","severity":1,"message":"314","line":6,"column":19,"nodeType":"278","messageId":"279","endLine":6,"endColumn":27},{"ruleId":"276","severity":1,"message":"315","line":7,"column":18,"nodeType":"278","messageId":"279","endLine":7,"endColumn":25},{"ruleId":"294","severity":1,"message":"295","line":13,"column":33,"nodeType":"296","messageId":"297","endLine":13,"endColumn":35},{"ruleId":"294","severity":1,"message":"312","line":17,"column":28,"nodeType":"296","messageId":"297","endLine":17,"endColumn":30},{"ruleId":"298","severity":1,"message":"316","line":24,"column":8,"nodeType":"300","endLine":24,"endColumn":10,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":28,"column":13,"nodeType":"292","endLine":39,"endColumn":14},{"ruleId":"276","severity":1,"message":"320","line":95,"column":12,"nodeType":"278","messageId":"279","endLine":95,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":210,"column":29,"nodeType":"296","messageId":"297","endLine":210,"endColumn":31},{"ruleId":"302","severity":1,"message":"303","line":211,"column":36,"nodeType":"304","messageId":"305","endLine":211,"endColumn":38},{"ruleId":"294","severity":1,"message":"295","line":212,"column":29,"nodeType":"296","messageId":"297","endLine":212,"endColumn":31},{"ruleId":"276","severity":1,"message":"280","line":1,"column":20,"nodeType":"278","messageId":"279","endLine":1,"endColumn":29},{"ruleId":"298","severity":1,"message":"321","line":109,"column":6,"nodeType":"300","endLine":109,"endColumn":8,"suggestions":"322"},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],["323"],["324"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'notifications' is assigned a value but never used.","'Chip' is defined but never used.","'states' is assigned a value but never used.","'classes' is assigned a value but never used.",["323"],["324"],"'gifTexts' is assigned a value but never used.","'text' is assigned a value but never used.","'getGifTexts' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TextList' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'content', 'savedSound', and 'sharingSound'. Either include them or remove the dependency array.","ArrayExpression",["325"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'loadingGifTexts' is assigned a value but never used.","'GifTextsList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getGifTexts' and 'getGifs'. Either include them or remove the dependency array.",["326"],"React Hook React.useEffect has a missing dependency: 'dataSave.IdData'. Either include it or remove the dependency array. If 'setMax' needs the current value of 'dataSave.IdData', you can also switch to useReducer instead of useState and read 'dataSave.IdData' in the reducer.",["327"],"Expected '!==' and instead saw '!='.","'setColor' is assigned a value but never used.","'setSpeed' is assigned a value but never used.","'setYear' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'year'. Either include it or remove the dependency array.",["328"],"jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","'MultilineTextFields' is defined but never used.","React Hook React.useEffect has a missing dependency: 'reverse'. Either include it or remove the dependency array.",["329"],"no-global-assign","no-unsafe-negation",{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [content, savedSound, sharingSound, showAnimation]",{"range":"340","text":"341"},"Update the dependencies array to be: [getGifTexts, getGifs, keyword]",{"range":"342","text":"343"},"Update the dependencies array to be: [dataSave.IdData]",{"range":"344","text":"345"},"Update the dependencies array to be: [year]",{"range":"346","text":"347"},"Update the dependencies array to be: [reverse]",{"range":"348","text":"349"},[4013,4028],"[content, savedSound, sharingSound, showAnimation]",[12480,12489],"[getGifTexts, getGifs, keyword]",[4115,4117],"[dataSave.IdData]",[963,965],"[year]",[3385,3387],"[reverse]"]