[{"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\context\\LayoutContext.js":"3","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\index.js":"4","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\Error.js":"5","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\Layout.js":"6","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\default.js":"7","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\Charts.js":"8","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js":"9","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js":"10","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\Widget.js":"11","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\PageTitle.js":"12","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\styles.js":"13","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\styles.js":"14","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\styles.js":"15","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\styles.js":"16","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\Tables.js":"17","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\Maps.js":"18","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\Dashboard.js":"19","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\Header.js":"20","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\notifications\\Notifications.js":"21","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\Icons.js":"22","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Wrappers\\Wrappers.js":"23","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\Sidebar.js":"24","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\notifications\\styles.js":"25","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\styles.js":"26","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\styles.js":"27","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\styles.js":"28","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\styles.js":"29","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js":"30","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"31","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\Dot.js":"32","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\Notification.js":"33","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\styles.js":"34","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"35","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"36","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\styles.js":"37","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"38","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\genurl\\Genurl.js":"39","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\helpers\\index.js":"40","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\Animation.js":"41","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\settings\\Settings.js":"42","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\styles.js":"43","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\components\\UploadGif.js":"44","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\news\\News.js":"45","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\UploadService.js":"46","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\http_common\\HTTPCommon.js":"47","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\Sound.js":"48","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\mock.js":"49","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\components\\UploadMp3.js":"50"},{"size":509,"mtime":1635245772989,"results":"51","hashOfConfig":"52"},{"size":995,"mtime":1640883862412,"results":"53","hashOfConfig":"52"},{"size":1378,"mtime":1638431694535,"results":"54","hashOfConfig":"52"},{"size":534,"mtime":1635244042059,"results":"55","hashOfConfig":"52"},{"size":1626,"mtime":1635244042034,"results":"56","hashOfConfig":"52"},{"size":4475,"mtime":1640883862418,"results":"57","hashOfConfig":"52"},{"size":3127,"mtime":1640883862486,"results":"58","hashOfConfig":"52"},{"size":5790,"mtime":1635244042024,"results":"59","hashOfConfig":"52"},{"size":1909,"mtime":1635244042025,"results":"60","hashOfConfig":"52"},{"size":1396,"mtime":1635244042026,"results":"61","hashOfConfig":"52"},{"size":2581,"mtime":1635244042016,"results":"62","hashOfConfig":"52"},{"size":447,"mtime":1635244042004,"results":"63","hashOfConfig":"52"},{"size":710,"mtime":1640883862420,"results":"64","hashOfConfig":"52"},{"size":482,"mtime":1635244042005,"results":"65","hashOfConfig":"52"},{"size":1015,"mtime":1640883862431,"results":"66","hashOfConfig":"52"},{"size":1395,"mtime":1635244042036,"results":"67","hashOfConfig":"52"},{"size":2146,"mtime":1640883862479,"results":"68","hashOfConfig":"52"},{"size":1010,"mtime":1635244042045,"results":"69","hashOfConfig":"52"},{"size":7902,"mtime":1640883862441,"results":"70","hashOfConfig":"52"},{"size":5583,"mtime":1640883862416,"results":"71","hashOfConfig":"52"},{"size":13862,"mtime":1635244042048,"results":"72","hashOfConfig":"52"},{"size":391433,"mtime":1635244042039,"results":"73","hashOfConfig":"52"},{"size":3892,"mtime":1635246370384,"results":"74","hashOfConfig":"52"},{"size":3381,"mtime":1640883862422,"results":"75","hashOfConfig":"52"},{"size":1943,"mtime":1635244042051,"results":"76","hashOfConfig":"52"},{"size":4043,"mtime":1638691117523,"results":"77","hashOfConfig":"52"},{"size":812,"mtime":1635244042041,"results":"78","hashOfConfig":"52"},{"size":178,"mtime":1635244042047,"results":"79","hashOfConfig":"52"},{"size":3000,"mtime":1640883862447,"results":"80","hashOfConfig":"52"},{"size":1075,"mtime":1640883862444,"results":"81","hashOfConfig":"52"},{"size":4160,"mtime":1636099247879,"results":"82","hashOfConfig":"52"},{"size":902,"mtime":1640883862424,"results":"83","hashOfConfig":"52"},{"size":3340,"mtime":1637858483136,"results":"84","hashOfConfig":"52"},{"size":1363,"mtime":1640883862428,"results":"85","hashOfConfig":"52"},{"size":4589,"mtime":1636363797530,"results":"86","hashOfConfig":"52"},{"size":1474,"mtime":1640883862426,"results":"87","hashOfConfig":"52"},{"size":1040,"mtime":1635244042003,"results":"88","hashOfConfig":"52"},{"size":1075,"mtime":1636099258530,"results":"89","hashOfConfig":"52"},{"size":6430,"mtime":1640883862454,"results":"90","hashOfConfig":"52"},{"size":1165,"mtime":1640883862433,"results":"91","hashOfConfig":"52"},{"size":18386,"mtime":1640883862436,"results":"92","hashOfConfig":"52"},{"size":18369,"mtime":1640883862468,"results":"93","hashOfConfig":"52"},{"size":534,"mtime":1637858483151,"results":"94","hashOfConfig":"52"},{"size":4102,"mtime":1640883862438,"results":"95","hashOfConfig":"52"},{"size":1532,"mtime":1640883862459,"results":"96","hashOfConfig":"52"},{"size":507,"mtime":1640883862482,"results":"97","hashOfConfig":"52"},{"size":176,"mtime":1640883862484,"results":"98","hashOfConfig":"52"},{"size":7869,"mtime":1640883862471,"results":"99","hashOfConfig":"52"},{"size":1906,"mtime":1640883862445,"results":"100","hashOfConfig":"52"},{"size":3475,"mtime":1640883862474,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1351p3q",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"104"},"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\index.js",[],["214","215"],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\App.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\context\\LayoutContext.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\index.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\Error.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\Layout.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\themes\\default.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\Charts.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\PageTitle.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Layout\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\PageTitle\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Widget\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\error\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\tables\\Tables.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\Maps.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\Dashboard.js",["216"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  LineChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n} from \"recharts\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport mock from \"./mock\";\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport BigStat from \"./components/BigStat/BigStat\";\r\n\r\nconst mainChartData = getMainChartData();\r\nconst PieChartData = [\r\n  { name: \"Group A\", value: 400, color: \"primary\" },\r\n  { name: \"Group B\", value: 300, color: \"secondary\" },\r\n  { name: \"Group C\", value: 300, color: \"warning\" },\r\n  { name: \"Group D\", value: 200, color: \"success\" },\r\n];\r\n\r\nexport default function Dashboard(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Dashboard\" button={<Button\r\n      variant=\"contained\"\r\n      size=\"medium\"\r\n      color=\"secondary\"\r\n    >\r\n        Latest Reports\r\n    </Button>} />\r\n      <Grid container spacing={4}>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Visits Today\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n              <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                12, 678\r\n              </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n              <LineChart\r\n                width={100}\r\n                height={30}\r\n                data={[\r\n                  { value: 10 },\r\n                  { value: 15 },\r\n                  { value: 10 },\r\n                  { value: 17 },\r\n                  { value: 18 },\r\n                ]}\r\n              >\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"value\"\r\n                  stroke={theme.palette.success.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                />\r\n              </LineChart>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Registrations\r\n                </Typography>\r\n                <Typography size=\"md\">860</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Sign Out\r\n                </Typography>\r\n                <Typography size=\"md\">32</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Rate\r\n                </Typography>\r\n                <Typography size=\"md\">3.25%</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"App Performance\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.performanceLegendWrapper}>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"warning\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  Integration\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"primary\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  SDK\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            <div className={classes.progressSection}>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                Integration\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={77}\r\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                SDK\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={73}\r\n                classes={{ barColorPrimary: classes.progressBarWarning }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Server Overview\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                60% / 37°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.secondary.main}\r\n                      fill={theme.palette.secondary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                54% / 31°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.primary.main}\r\n                      fill={theme.palette.primary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                57% / 21°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.warning.main}\r\n                      fill={theme.palette.warning.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6}>\r\n                <ResponsiveContainer width=\"100%\" height={144}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={PieChartData}\r\n                      innerRadius={30}\r\n                      outerRadius={40}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {PieChartData.map((entry, index) => (\r\n                        <Cell\r\n                          key={`cell-${index}`}\r\n                          fill={theme.palette[entry.color].main}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <div className={classes.pieChartLegendWrapper}>\r\n                  {PieChartData.map(({ name, value, color }, index) => (\r\n                    <div key={color} className={classes.legendItemContainer}>\r\n                      <Dot color={color} />\r\n                      <Typography style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\r\n                        &nbsp;{name}&nbsp;\r\n                      </Typography>\r\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                        &nbsp;{value}\r\n                      </Typography>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            bodyClass={classes.mainChartBody}\r\n            header={\r\n              <div className={classes.mainChartHeader}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                >\r\n                  Daily Line Chart\r\n                </Typography>\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"warning\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Tablet\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"primary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Mobile\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"secondary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Desktop\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <Select\r\n                  value={mainChartState}\r\n                  onChange={e => setMainChartState(e.target.value)}\r\n                  input={\r\n                    <OutlinedInput\r\n                      labelWidth={0}\r\n                      classes={{\r\n                        notchedOutline: classes.mainChartSelectRoot,\r\n                        input: classes.mainChartSelect,\r\n                      }}\r\n                    />\r\n                  }\r\n                  autoWidth\r\n                >\r\n                  <MenuItem value=\"daily\">Daily</MenuItem>\r\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                </Select>\r\n              </div>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\r\n              <ComposedChart\r\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\r\n                data={mainChartData}\r\n              >\r\n                <YAxis\r\n                  ticks={[0, 2500, 5000, 7500]}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <XAxis\r\n                  tickFormatter={i => i + 1}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <Area\r\n                  type=\"natural\"\r\n                  dataKey=\"desktop\"\r\n                  fill={theme.palette.background.light}\r\n                  strokeWidth={0}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"mobile\"\r\n                  stroke={theme.palette.primary.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"linear\"\r\n                  dataKey=\"tablet\"\r\n                  stroke={theme.palette.warning.main}\r\n                  strokeWidth={2}\r\n                  dot={{\r\n                    stroke: theme.palette.warning.dark,\r\n                    strokeWidth: 2,\r\n                    fill: theme.palette.warning.main,\r\n                  }}\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Widget>\r\n        </Grid>\r\n        {mock.bigStat.map(stat => (\r\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\r\n            <BigStat {...stat} />\r\n          </Grid>\r\n        ))}\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            title=\"Support Requests\"\r\n            upperTitle\r\n            noBodyPadding\r\n            bodyClass={classes.tableWidget}\r\n          >\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n// #######################################################################\r\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\r\n  var array = new Array(length).fill();\r\n  let lastValue;\r\n\r\n  return array.map((item, index) => {\r\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\r\n\r\n    while (\r\n      randomValue <= min ||\r\n      randomValue >= max ||\r\n      (lastValue && randomValue - lastValue > maxDiff)\r\n    ) {\r\n      randomValue = Math.floor(Math.random() * multiplier + 1);\r\n    }\r\n\r\n    lastValue = randomValue;\r\n\r\n    return { value: randomValue };\r\n  });\r\n}\r\n\r\nfunction getMainChartData() {\r\n  var resultArray = [];\r\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\r\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\r\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\r\n\r\n  for (let i = 0; i < tablet.length; i++) {\r\n    resultArray.push({\r\n      tablet: tablet[i].value,\r\n      desktop: desktop[i].value,\r\n      mobile: mobile[i].value,\r\n    });\r\n  }\r\n\r\n  return resultArray;\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\Header.js",["217","218"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\nimport {\r\n  StompSessionProvider,\r\n  useSubscription,\r\n} from \"react-stomp-hooks\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst notifications = [\r\n  { \r\n    color: \"warning\", \r\n    type: \"notification\",\r\n    message: \"Check out this awesome ticket\" \r\n  },\r\n  {\r\n    color: \"success\",\r\n    type: \"notification\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    color: \"primary\",\r\n    type: \"notification\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  const SubscribingComponent = () => {\r\n    const [notificationsMenu, setNotificationsMenu] = useState(null);\r\n    const [notificationsData, setNotificationsData] = useState([]);\r\n    const [unreadNotifications, setUnreadNotifications] = useState(0);\r\n\r\n    const classes = useStyles();\r\n    const layoutState = useLayoutState();\r\n    const layoutDispatch = useLayoutDispatch();\r\n\r\n    const onMessage = async (msg) => {\r\n      setNotificationsData((values) => {\r\n        let newData = [...values];\r\n        const obj = JSON.parse(msg.body);\r\n        newData.unshift({\r\n          color: \"primary\",\r\n          type: \"notification\",\r\n          message: obj.name + \" vừa donate \" + obj.money + \" đồng\",\r\n        });\r\n        if (newData.length > 5) {\r\n          newData.splice(newData.length - 1, 1);\r\n        }\r\n        return newData;\r\n      });\r\n      setUnreadNotifications(values => values + 1);\r\n    }\r\n  \r\n    useSubscription(\"/topic/message\", async (message) => await onMessage(message));\r\n    /*useEffect(() => {\r\n      setMessage(\"Cam on ban A da donate 100000 dong\");\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 200000 dong\"), 3000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 300000 dong\"), 6000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 400000 dong\"), 9000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 500000 dong\"), 12000);\r\n      setTimeout(() => setMessage(\"Cam on ban B da donate 600000 dong\"), 15000);\r\n    }, []);*/\r\n\r\n    return (\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={() => toggleSidebar(layoutDispatch)}\r\n            className={classNames(\r\n              classes.headerMenuButtonSandwich,\r\n              classes.headerMenuButtonCollapse,\r\n            )}\r\n          >\r\n            {layoutState.isSidebarOpened ? (\r\n              <ArrowBackIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            ) : (\r\n              <MenuIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n          </IconButton>\r\n          <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n            Donation GIFs Webapp\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-haspopup=\"true\"\r\n            aria-controls=\"mail-menu\"\r\n            onClick={e => {\r\n              setNotificationsMenu(e.currentTarget);\r\n              if (unreadNotifications) {\r\n                setUnreadNotifications(0);\r\n              }\r\n            }}\r\n            className={classes.headerMenuButton}\r\n          >\r\n            <Badge\r\n              badgeContent={unreadNotifications ? unreadNotifications : null}\r\n              color=\"warning\"\r\n            >\r\n              <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n            </Badge>\r\n          </IconButton>\r\n          <Menu\r\n            id=\"notifications-menu\"\r\n            open={Boolean(notificationsMenu)}\r\n            anchorEl={notificationsMenu}\r\n            onClose={() => setNotificationsMenu(null)}\r\n            className={classes.headerMenu}\r\n            disableAutoFocusItem\r\n          >\r\n            {notificationsData.map(notification => (\r\n              <MenuItem\r\n                /*key={notification.id}*/\r\n                onClick={() => { setNotificationsMenu(null); setUnreadNotifications(0); }}\r\n                className={classes.headerMenuItem}\r\n              >\r\n                <Notification {...notification} typographyVariant=\"inherit\" />\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StompSessionProvider\r\n        url={\"https://web-donate.herokuapp.com/gs-guide-websocket\"}\r\n        debug={(str) => {\r\n            console.log(str);\r\n        }}\r\n    >\r\n      <SubscribingComponent />\r\n    </StompSessionProvider>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\notifications\\Notifications.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\Icons.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\Sidebar.js",["219"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\n\r\nimport {\r\n  Settings,\r\n  Home as HomeIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  FormatSize as TypographyIcon,\r\n  FilterNone as UIElementsIcon,\r\n  BorderAll as TableIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"Dashboard\", link: \"/app/dashboard\", icon: <HomeIcon /> },\r\n  {\r\n    id: 1,\r\n    label: \"Animation\",\r\n    link: \"/app/animation\",\r\n    icon: <TypographyIcon />,\r\n  },\r\n  { id: 2, label: \"Tables\", link: \"/app/tables\", icon: <TableIcon /> },\r\n  { id: 3, label: \"Settings\", link: \"/app/settings\", icon: <Settings />},\r\n  { id: 4, label: \"Sound\", link: \"/app/sound\", icon: <Settings />},\r\n  {\r\n    id: 5,\r\n    label: \"Notifications\",\r\n    link: \"/app/notifications\",\r\n    icon: <NotificationsIcon />,\r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function() {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map(link => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\notifications\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Header\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\icons\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\maps\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js",["220","221","222"],"import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableBody,\r\n  TableCell,\r\n  Chip\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../../styles\";\r\n\r\nconst states = {\r\n  sent: \"success\",\r\n  pending: \"warning\",\r\n  declined: \"secondary\",\r\n};\r\n\r\nexport default function TableComponent({ data }) {\r\n  const classes = useStyles();\r\n  var keys = Object.keys(data[0]).map(i => i.toUpperCase());\r\n  keys.shift(); // delete \"id\" key\r\n\r\n  return (\r\n    <Table className=\"mb-0\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {keys.map(key => (\r\n            <TableCell key={key}>{key}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {data.map(({ id, name, email, product, price, date, city, status }) => (\r\n          <TableRow key={id}>\r\n            <TableCell className=\"pl-3 fw-normal\">{name}</TableCell>\r\n            <TableCell>{email}</TableCell>\r\n            <TableCell>{product}</TableCell>\r\n            <TableCell>{price}</TableCell>\r\n            <TableCell>{date}</TableCell>\r\n            <TableCell>{city}</TableCell>\r\n            <TableCell>\r\n              <Chip label={status} classes={{root: classes[states[status.toLowerCase()]]}}/>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],["223","224"],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\Dot.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\components\\Notification\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\genurl\\Genurl.js",["225","226","227","228","229","230","231","232","233","234","235"],"import { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport Zoom from '@material-ui/core/Zoom/Zoom';\r\nimport {\r\n    StompSessionProvider,\r\n    useSubscription,\r\n} from \"react-stomp-hooks\";\r\n\r\nimport { getSharingGif, getSharingTextStyleId, getSharingSound } from \"../../helpers\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\n\r\nconst SubscribingComponent = (props) => {\r\n    const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n    const [gifTexts, setGifTexts] = useState([]);\r\n    const [waiting, setWaiting] = useState(true);\r\n    const [savedGif, setSavedGif] = useState(\"\");\r\n    const [savedTextStyleId, setSavedTextStyleId] = useState(0);\r\n    const [savedSound, setSavedSound] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [messageQueue, setMessageQueue] = useState([]);\r\n    const [showAnimation, setShowAnimation] = useState(false);\r\n    const [countMessage, setCountMessage] = useState(0);\r\n    const [currentMessage, setCurrentMessage] = useState(0);\r\n    const [name, setName] = useState(\"\");\r\n    const [money, setMoney] = useState(0);\r\n    \r\n    const audio = useRef(null);\r\n    const speaking = useRef(null);\r\n\r\n    const sharingGif = getSharingGif();\r\n    const sharingTextStyleId = getSharingTextStyleId();\r\n    const sharingSound = getSharingSound();\r\n\r\n    const getGifTexts = async (text) => {\r\n        const res = await gf.animate(text, { limit: 16 })\r\n        setGifTexts(values => res.data);\r\n    }\r\n\r\n    const Item = (props) => {\r\n        return (\r\n            <div className=\"gif-item\">\r\n                <img src={props.url} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const TextList = (props) => {\r\n        const items = props.gifs.map((itemData, index) => {\r\n            if (index == (sharingTextStyleId ? sharingTextStyleId : savedTextStyleId))\r\n                return <Item url={itemData.url} />;\r\n            return <div></div>\r\n        });\r\n        return <div className=\"text-container\">{items}</div>;\r\n    };\r\n\r\n    const AnimatedText = () => {\r\n        return ( \r\n            <div class=\"content\">\r\n                <h1 class=\"text_shadows\" style={{ color: \"white\", fontWeight: \"bold\"}}>\r\n                    {/*text*/}\r\n                    Cảm ơn <mark style={{ background: \"none\", color: \"red\"}}>{name}</mark> đã donate <mark style={{ background: \"none\", color: \"red\"}}>{money}</mark> đồng!                \r\n                </h1>\r\n                <h1 class=\"text_shadows\" style={{ textShadow: \"none\", color: \"red\", fontWeight: \"bold\", fontSize: \"0.9rem\"}}>{content}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onMessage = (msg) => {\r\n        setCountMessage(values => values + 1);\r\n        setMessageQueue(values => {\r\n            const obj = JSON.parse(msg.body);\r\n            const text = \"Cảm ơn \" + obj.name + \" đã donate \" + obj.money + \" đồng\";\r\n            const content = '\" ' + obj.content + ' \"';\r\n            return [...values, {\r\n                id: countMessage,\r\n                content: content,\r\n                text: text,\r\n                name: obj.name,\r\n                money: obj.money\r\n            }];\r\n        });\r\n        //await getGifTexts(text);\r\n    }\r\n\r\n    useSubscription(\"/topic/message\", (message) => onMessage(message));\r\n\r\n    useEffect(() => {\r\n        if (!showAnimation) return;\r\n        audio.current = new Audio(sharingSound ? sharingSound : savedSound);\r\n        speaking.current = new Audio(`https://web-donate.herokuapp.com/text_to_speech?text=${content}`);\r\n        setTimeout(() => audio.current.play(), 1000);\r\n        setTimeout(() => audio.current.pause(), 4000);\r\n        setTimeout(() => speaking.current.play(), 4100);\r\n        setTimeout(() => setWaiting(false), 1000);\r\n        setTimeout(() => setWaiting(true), 11000);\r\n        setTimeout(() => setCurrentMessage(values => values + 1), 11000);\r\n        setTimeout(() => setShowAnimation(false), 11000);\r\n    }, [showAnimation]);\r\n\r\n    useEffect(() => {\r\n        //alert(currentMessage + \" \" + messageQueue.length);\r\n        if (currentMessage >= messageQueue.length) return;\r\n        if (showAnimation) return;\r\n        const message = messageQueue[currentMessage];\r\n        setContent(values => message.content);\r\n        setText(values => message.text);\r\n        setName(values => message.name);\r\n        setMoney(values => message.money);\r\n        setShowAnimation(true);\r\n    }, [currentMessage, messageQueue, showAnimation]);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                response.data.map(item => {\r\n                    if (item.id == 1) {\r\n                        setSavedGif(values => item.gifUrl);\r\n                        setSavedTextStyleId(values => item.textStyleId);\r\n                        setSavedSound(values => item.soundUrl);\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <> \r\n            <div style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"space-around\",\r\n                alignItems: \"center\",\r\n            }}>\r\n                <Zoom \r\n                    in={!waiting}\r\n                    timeout={{enter: 1500, exit: 200}}\r\n                >\r\n                    <div>\r\n                        <img src={sharingGif ? sharingGif : savedGif} /*width=\"300\" height=\"300\"*//>\r\n                    </div>\r\n                </Zoom>\r\n                <Zoom \r\n                    in={!waiting}\r\n                    timeout={{enter: 1500, exit: 200}}\r\n                >\r\n                    <div>\r\n                        <AnimatedText />\r\n                        {/*<TextList gifs={gifTexts} />*/}\r\n                    </div>\r\n                </Zoom>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function Genurl() {\r\n\r\n    return (\r\n        <>\r\n            <StompSessionProvider\r\n                url={\"https://web-donate.herokuapp.com/gs-guide-websocket\"}\r\n                debug={(str) => {\r\n                    console.log(str);\r\n                }}\r\n            >\r\n                <SubscribingComponent />\r\n            </StompSessionProvider>\r\n        </>\r\n    );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\helpers\\index.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\Animation.js",["236","237","238","239","240","241","242","243","244"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport ButtonBase from '@mui/material/ButtonBase';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport Box from '@mui/material/Box';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    LinearProgress,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport UploadGif from \"./components/UploadGif\";\r\nimport useStyles from \"./styles\";\r\nimport { setSharingGif, setSharingTextStyleId } from \"../../helpers\";\r\nimport UploadService from \"../../services/UploadService\";\r\nimport axios from 'axios';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n}));\r\n  \r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n            <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n                position: 'absolute',\r\n                right: 8,\r\n                top: 8,\r\n                color: (theme) => theme.palette.grey[500],\r\n            }}\r\n            >\r\n            <CloseIcon />\r\n            </IconButton>\r\n        ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst ImageButton = styled(ButtonBase)(({ theme }) => ({\r\n    position: 'relative',\r\n    height: 200,\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '100% !important', // Overrides inline-style\r\n      height: 100,\r\n    },\r\n    '&:hover, &.Mui-focusVisible': {\r\n      zIndex: 1,\r\n      '& .MuiImageBackdrop-root': {\r\n        opacity: 0.15,\r\n      },\r\n      '& .MuiImageMarked-root': {\r\n        opacity: 0,\r\n      },\r\n      '& .MuiTypography-root': {\r\n        border: '4px solid currentColor',\r\n      },\r\n    },\r\n}));\r\n\r\nconst ImageSrc = styled('span')({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center 40%',\r\n  });\r\n  \r\nconst Image = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    color: theme.palette.common.white,\r\n}));\r\n  \r\nconst ImageBackdrop = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundColor: theme.palette.common.black,\r\n    opacity: 0.4,\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nconst ImageMarked = styled('span')(({ theme }) => ({\r\n    height: 3,\r\n    width: 18,\r\n    backgroundColor: theme.palette.common.white,\r\n    position: 'absolute',\r\n    bottom: -2,\r\n    left: 'calc(50% - 9px)',\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nexport default function Animation() {\r\n    const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n    const [gifs, setGifs] = useState([]);\r\n    const [gifTexts, setGifTexts] = useState([]);\r\n    const [keyword, setKeyword] = useState(\"anime\");\r\n    const [loadingGifs, setLoadingGifs] = useState(false);\r\n    const [loadingGifTexts, setLoadingGifTexts] = useState(false);\r\n    const [openGifDialog, setOpenGifDialog] = useState(false);\r\n    const [openTextStyleDialog, setOpenTextStyleDialog] = useState(false);\r\n    const [focusGif, setFocusGif] = useState(\"\");\r\n    const [focusTextStyle, setFocusTextStyle] = useState(\"\");\r\n    const [focusTextStyleId, setFocusTextStyleId] = useState(0);\r\n    const [choosingGif, setChoosingGif] = useState(\"\");\r\n    const [choosingTextStyleId, setChoosingTextStyleId] = useState(\"\");\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [uploadedGifs, setUploadedGifs] = useState(undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    const [savedSound, setSavedSound] = useState(\"\");\r\n\r\n    const handleOpenGifDialog = (url) => {\r\n        setFocusGif(url);\r\n        setOpenGifDialog(true);\r\n    };\r\n\r\n    const handleOpenTextStyleDialog = (url, id) => {\r\n        setFocusTextStyle(url);\r\n        setFocusTextStyleId(id);\r\n        setOpenTextStyleDialog(true);\r\n    };\r\n      \r\n    const handleCloseGifDialog = () => {\r\n        setOpenGifDialog(false);\r\n    };\r\n\r\n    const handleCloseTextStyleDialog = () => {\r\n        setOpenTextStyleDialog(false);\r\n    };\r\n\r\n    const handleChooseGif = () => {\r\n        setChoosingGif(focusGif);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const handleChooseTextStyle = () => {\r\n        setChoosingTextStyleId(focusTextStyleId);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const GifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const id = item.url.split('-').pop();\r\n                        const url = \"https://media.giphy.com/media/\" + id + \"/giphy.gif\";\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const GifTextsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item, index) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenTextStyleDialog(url, index)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const UploadedGifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const getGifs = async (keyword) => {\r\n        const res = await gf.search(keyword, { limit: 32 });\r\n        setGifs(values => res.data);\r\n        setTimeout(() => setLoadingGifs(false), 1000);\r\n    }\r\n\r\n    const getGifTexts = async (text) => {\r\n        const res = await gf.animate(text, { limit: 32 })\r\n        setGifTexts(values => res.data);\r\n        setTimeout(() => setLoadingGifTexts(false), 1000);\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setKeyword(event.target.value);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setSharingGif(choosingGif);\r\n        setSharingTextStyleId(choosingTextStyleId);\r\n        setOpenSnackbar(true);\r\n\r\n        axios.post(\"https://web-donate.herokuapp.com/setting\", {\r\n            id: 1,\r\n            gifUrl: choosingGif,\r\n            textStyleId: choosingTextStyleId,\r\n            soundUrl: savedSound,\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLoadingGifs(values => true);\r\n        getGifs(keyword);\r\n        setLoadingGifTexts(values => true);\r\n        getGifTexts(keyword);\r\n    }, [keyword]);\r\n\r\n    useEffect(() => {\r\n        UploadService.getGifFiles()\r\n          .then((response) => {\r\n            setUploadedGifs((values) => response.data);\r\n          })\r\n          .catch((error) => console.log(error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                response.data.map(item => {\r\n                    if (item.id == 1) {\r\n                        setSavedSound(values => item.soundUrl);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle title=\"Animation Settings\"/>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <div style={{width: \"50%\"}}>\r\n                        <TextField \r\n                            label=\"Search by keyword\" \r\n                            color=\"primary\" \r\n                            variant=\"outlined\" \r\n                            size=\"small\" \r\n                            fullWidth \r\n                            focused \r\n                            value={keyword}\r\n                            onChange={handleInputChange}\r\n                            spellCheck=\"false\"\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifs && (<GifsList gifs={gifs} />)}\r\n                        {!!loadingGifs && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>\r\n                {/*<Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Text Style\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifTexts && (<GifTextsList gifs={gifTexts} />)}\r\n                        {!!loadingGifTexts && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>*/}\r\n                {uploadedGifs && (\r\n                    <Grid item container xs={12} spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                                Choose Your Uploaded Gif\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <UploadedGifsList gifs={uploadedGifs}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                )}\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Upload your Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UploadGif />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div \r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={handleSave}>\r\n                            Save settings\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <BootstrapDialog\r\n                onClose={handleCloseGifDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openGifDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseGifDialog}>\r\n                    Preview gif\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusGif} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseGif(); handleCloseGifDialog(); }}>\r\n                    Choose this gif\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <BootstrapDialog\r\n                onClose={handleCloseTextStyleDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openTextStyleDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseTextStyleDialog}>\r\n                    Preview text style\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusTextStyle} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseTextStyle(); handleCloseTextStyleDialog(); }}>\r\n                    Choose this text style\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Snackbar open={openSnackbar} autoHideDuration={1000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\r\n                    Successfully saved your choice!\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\settings\\Settings.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\styles.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\animation\\components\\UploadGif.js",["245"],"import { useState, useEffect } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Grid, Box, Typography, Button, withStyles } from '@material-ui/core';\r\n\r\nimport UploadService from \"../../../services/UploadService\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nexport default function UploadGif() {\r\n  const [state, setState] = useState({\r\n    currentFile: undefined,\r\n    previewGif: undefined,\r\n    progress: 0,\r\n    message: \"\",\r\n    isError: false,\r\n  });\r\n\r\n  const onSelectFile = (event) => {\r\n    setState(values => ({\r\n      ...values,\r\n      currentFile: event.target.files[0],\r\n      previewGif: URL.createObjectURL(event.target.files[0]),\r\n      progress: 0,\r\n      message: \"\",\r\n    }));\r\n  };\r\n\r\n  const onUpload = () => {\r\n    setState(values => ({\r\n      ...values,\r\n      progress: 0,\r\n    }));\r\n\r\n    UploadService.upload(state.currentFile, (event) => {\r\n      setState(values => ({\r\n        ...values,\r\n        progress: Math.round((100 * event.loaded) / event.total),\r\n      }));\r\n    })\r\n      .then((response) => {\r\n        setState(values => ({\r\n          ...values,\r\n          message: response.data.message + \". Reload the page to see the result!\",\r\n          isError: false,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        setState(values => ({\r\n          ...values,\r\n          progress: 0,\r\n          message: \"Could not upload the gif!\",\r\n          currentFile: undefined,\r\n          isError: true\r\n        }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onSelectFile} />\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" >\r\n                Choose your Gif\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"file-name\">\r\n            {state.currentFile ? state.currentFile.name : null}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            className=\"btn-upload\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            component=\"span\"\r\n            disabled={!state.currentFile}\r\n            onClick={onUpload}>\r\n            Upload\r\n          </Button>\r\n        </Grid>\r\n        {state.message && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" className={`upload-message ${state.isError ? \"error\" : \"\"}`}>\r\n              {state.message}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          {state.currentFile && (\r\n            <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\r\n              <Box width=\"100%\" mr={1}>\r\n                <BorderLinearProgress variant=\"determinate\" value={state.progress} />\r\n              </Box>\r\n              <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${state.progress}%`}</Typography>\r\n              </Box>\r\n            </Box>)\r\n          }\r\n        </Grid>\r\n        {state.previewGif && (\r\n          <Grid item container xs={12} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                Preview Gif\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                <img className=\"preview my20\" src={state.previewGif} alt=\"\" width=\"350\"/>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\news\\News.js",["246","247","248","249","250","251","252"],"import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function News() {\r\n    const [color, setColor] = useState(\"black\");\r\n    const [speed, setSpeed] = useState(20);\r\n    const [year, setYear] = useState(2021);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://web-donate.herokuapp.com/donate/total_donate_by_year?year=${year}`)\r\n        .then(response => {\r\n            if (response.status == \"200\") {\r\n                let donateInfo = \"Thống kê số tiền donate đã nhận được trong năm \" + year + \": \";\r\n                response.data.map((item, id) => {\r\n                    donateInfo += \"tháng \" + item.month + \" - \" + item.total_donate + \" đồng\";\r\n                    if (id != 11) donateInfo += \" | \";\r\n                    return item;\r\n                });\r\n                setText(donateInfo);\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <marquee\r\n                style={{\r\n                    background: \"linear-gradient(#E89B00, #FFBC00, #FFDE5D)\",\r\n                    color: color,\r\n                    fontSize: \"3vh\",\r\n                    borderStyle: \"double\",\r\n                    border: \"2px solid gray\",\r\n                    fontWeight: \"bold\",\r\n                    fontStyle: \"italic\",\r\n                }}\r\n                scrolldelay={speed}\r\n            >\r\n                {text}\r\n            </marquee>\r\n        </>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\UploadService.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\services\\http_common\\HTTPCommon.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\Sound.js",["253","254","255","256"],"import React, { useState, useEffect } from 'react';\r\nimport './styles.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport VolumeDown from '@material-ui/icons/VolumeDown';\r\nimport VolumeUp from '@material-ui/icons/VolumeUp';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PageTitle from \"../../components/PageTitle\";\r\n\r\nimport UploadMp3 from \"./components/UploadMp3\";\r\nimport UploadService from '../../services/UploadService';\r\nimport { setSharingSound } from '../../helpers';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport AudioPlayer from 'material-ui-audio-player';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst muiTheme = createMuiTheme({});\r\n\r\n//-----------------------------------------\r\nconst useStyles0 = makeStyles({\r\n  root: {\r\n    width: 500,\r\n  },\r\n});\r\n\r\nfunction ContinuousSlider() {\r\n  const classes = useStyles0();\r\n  const [value, setValue] = React.useState(30);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"continuous-slider\" gutterBottom>\r\n        Volume\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <VolumeDown />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider value={value} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <VolumeUp />\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n//-----------------------------------------\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction ContainedButtons() {\r\n  const classes = useStyles1();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button variant=\"contained\">Speak</Button>\r\n      <Button variant=\"contained\" startIcon = {<SaveIcon />}>\r\n        Save settings\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n//-----------------------------------------\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '50ch',\r\n      \r\n    },\r\n  },\r\n}));\r\n\r\nfunction BasicTextFields() {\r\n  const classes = useStyles2();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField \r\n        id=\"outlined-basic\" \r\n        label=\"Type something to test speaking voice\" \r\n        variant=\"outlined\" \r\n        color = \"primary\" />\r\n    </form>\r\n  );\r\n}\r\n\r\n//-----------------------------------------\r\nconst voices = [\r\n  {\r\n    value: 'VNFMV',\r\n    label: 'Vietnamese Female Voice',\r\n  },\r\n  {\r\n    value: 'VNMV',\r\n    label: 'Vietnamese Male Voice',\r\n  },\r\n];\r\nconst useStyles3 = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\nfunction MultilineTextFields() {\r\n  const classes = useStyles3();\r\n  const [voice, setVoice] = React.useState('VNFMV');\r\n\r\n  const handleChange = (event) => {\r\n    setVoice(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <div>\r\n      <TextField\r\n          id=\"outlined-select-currency-native\"\r\n          select\r\n          label=\"Choose Voice\"\r\n          value={voice}\r\n          onChange={handleChange}\r\n          SelectProps={{\r\n            native: true,\r\n          }}\r\n          helperText=\"Please select your preference voice\"\r\n          variant=\"outlined\"\r\n        >\r\n          {voices.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n      </div>\r\n    </form>\r\n    );\r\n  }\r\n\r\n//-----------------------------------------\r\nfunction Sound() {\r\n  const [uploadedFiles, setUploadedFiles] = useState(undefined);\r\n  const [choosingSound, setChoosingSound] = useState(\"\");\r\n  const [savedGif, setSavedGif] = useState(\"\");\r\n  const [savedTextStyleId, setSavedTextStyleId] = useState(0); \r\n\r\n  const handleClick = (url) => {\r\n    alert(\"Chọn thành công!\");\r\n    setChoosingSound(values => url);\r\n  }\r\n\r\n  const handleSave = () => {\r\n    alert(\"Lưu thành công!\");\r\n    setSharingSound(choosingSound);\r\n\r\n    axios.post(\"https://web-donate.herokuapp.com/setting\", {\r\n        id: 1,\r\n        gifUrl: savedGif,\r\n        textStyleId: savedTextStyleId,\r\n        soundUrl: choosingSound,\r\n    })\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  const UploadedFilesList = (props) => {\r\n    const items = props.files.map(item => (\r\n      <Grid container item xs={12}>\r\n        <Grid item xs={10}>\r\n          <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <ThemeProvider theme={muiTheme}>\r\n              <AudioPlayer width=\"90%\" src={item.url} />\r\n            </ThemeProvider>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button onClick={() => handleClick(item.url)} variant=\"contained\">\r\n            Choose\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    ));\r\n    return (\r\n      <Grid container spacing={5}>{items}</Grid>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    UploadService.getMp3Files()\r\n      .then((response) => {\r\n        setUploadedFiles((values) => response.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n    .then(response => {\r\n        if (response.status == \"200\") {\r\n            response.data.map(item => {\r\n                if (item.id == 1) {\r\n                    setSavedGif(values => item.gifUrl);\r\n                    setSavedTextStyleId(values => item.textStyleId);\r\n                }\r\n            })\r\n        }\r\n    })\r\n    .catch(error => console.log(error));\r\n}, []);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Sound Settings\"/>\r\n      <Grid container spacing={4}>\r\n        <Grid container item spacing={4} xs={12}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                Speaking Voice Settings\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <div className=\"App\">\r\n              <header className=\"App-header\">\r\n                Test your speaking voice\r\n                <BasicTextFields />\r\n                <ContinuousSlider />\r\n                <ContainedButtons />\r\n                <MultilineTextFields />\r\n              </header>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        {uploadedFiles && (\r\n          <Grid container item xs={12} spacing={4}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                  Choose Your Uploaded Alert Sound\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <UploadedFilesList files={uploadedFiles}/>\r\n              </Grid>\r\n          </Grid>\r\n        )}\r\n        <Grid container item spacing={4} xs={12}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n              Upload Your Alert Sound\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <UploadMp3 />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <div \r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n            }}\r\n        >\r\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={handleSave}>\r\n                Save settings\r\n            </Button>\r\n        </div>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sound;","C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\dashboard\\mock.js",[],"C:\\Users\\Administrator\\Desktop\\Projects\\Front-end\\src\\pages\\sound\\components\\UploadMp3.js",["257"],"import { useState, useEffect } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Grid, Box, Typography, Button, withStyles } from '@material-ui/core';\r\n\r\nimport UploadService from \"../../../services/UploadService\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nexport default function UploadGif() {\r\n  const [state, setState] = useState({\r\n    currentFile: undefined,\r\n    progress: 0,\r\n    message: \"\",\r\n    isError: false,\r\n  });\r\n\r\n  const onSelectFile = (event) => {\r\n    setState(values => ({\r\n      ...values,\r\n      currentFile: event.target.files[0],\r\n      progress: 0,\r\n      message: \"\",\r\n    }));\r\n  };\r\n\r\n  const onUpload = () => {\r\n    setState(values => ({\r\n      ...values,\r\n      progress: 0,\r\n    }));\r\n\r\n    UploadService.upload(state.currentFile, (event) => {\r\n      setState(values => ({\r\n        ...values,\r\n        progress: Math.round((100 * event.loaded) / event.total),\r\n      }));\r\n    })\r\n      .then((response) => {\r\n        setState(values => ({\r\n          ...values,\r\n          message: response.data.message + \". Reload the page to see the result!\",\r\n          isError: false,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        setState(values => ({\r\n          ...values,\r\n          progress: 0,\r\n          message: \"Could not upload file!\",\r\n          currentFile: undefined,\r\n          isError: true\r\n        }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onSelectFile} />\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" >\r\n                Choose your Mp3 file\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"file-name\">\r\n            {state.currentFile ? state.currentFile.name : null}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            className=\"btn-upload\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            component=\"span\"\r\n            disabled={!state.currentFile}\r\n            onClick={onUpload}>\r\n            Upload\r\n          </Button>\r\n        </Grid>\r\n        {state.message && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" className={`upload-message ${state.isError ? \"error\" : \"\"}`}>\r\n              {state.message}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          {state.currentFile && (\r\n            <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\r\n              <Box width=\"100%\" mr={1}>\r\n                <BorderLinearProgress variant=\"determinate\" value={state.progress} />\r\n              </Box>\r\n              <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${state.progress}%`}</Typography>\r\n              </Box>\r\n            </Box>)\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}",{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":26},{"ruleId":"262","severity":1,"message":"267","line":35,"column":7,"nodeType":"264","messageId":"265","endLine":35,"endColumn":20},{"ruleId":"262","severity":1,"message":"268","line":9,"column":17,"nodeType":"264","messageId":"265","endLine":9,"endColumn":31},{"ruleId":"262","severity":1,"message":"269","line":8,"column":3,"nodeType":"264","messageId":"265","endLine":8,"endColumn":7},{"ruleId":"262","severity":1,"message":"270","line":12,"column":7,"nodeType":"264","messageId":"265","endLine":12,"endColumn":13},{"ruleId":"262","severity":1,"message":"271","line":19,"column":9,"nodeType":"264","messageId":"265","endLine":19,"endColumn":16},{"ruleId":"258","replacedBy":"272"},{"ruleId":"260","replacedBy":"273"},{"ruleId":"262","severity":1,"message":"274","line":15,"column":12,"nodeType":"264","messageId":"265","endLine":15,"endColumn":20},{"ruleId":"262","severity":1,"message":"275","line":21,"column":12,"nodeType":"264","messageId":"265","endLine":21,"endColumn":16},{"ruleId":"262","severity":1,"message":"276","line":36,"column":11,"nodeType":"264","messageId":"265","endLine":36,"endColumn":22},{"ruleId":"277","severity":1,"message":"278","line":44,"column":17,"nodeType":"279","endLine":44,"endColumn":40},{"ruleId":"262","severity":1,"message":"280","line":49,"column":11,"nodeType":"264","messageId":"265","endLine":49,"endColumn":19},{"ruleId":"281","severity":1,"message":"282","line":51,"column":23,"nodeType":"283","messageId":"284","endLine":51,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":100,"column":8,"nodeType":"287","endLine":100,"endColumn":23,"suggestions":"288"},{"ruleId":"281","severity":1,"message":"282","line":117,"column":33,"nodeType":"283","messageId":"284","endLine":117,"endColumn":35},{"ruleId":"289","severity":1,"message":"290","line":118,"column":40,"nodeType":"291","messageId":"292","endLine":118,"endColumn":42},{"ruleId":"281","severity":1,"message":"282","line":119,"column":33,"nodeType":"283","messageId":"284","endLine":119,"endColumn":35},{"ruleId":"277","severity":1,"message":"278","line":143,"column":25,"nodeType":"279","endLine":143,"endColumn":101},{"ruleId":"262","severity":1,"message":"274","line":141,"column":12,"nodeType":"264","messageId":"265","endLine":141,"endColumn":20},{"ruleId":"262","severity":1,"message":"293","line":144,"column":12,"nodeType":"264","messageId":"265","endLine":144,"endColumn":27},{"ruleId":"262","severity":1,"message":"294","line":230,"column":11,"nodeType":"264","messageId":"265","endLine":230,"endColumn":23},{"ruleId":"285","severity":1,"message":"295","line":354,"column":8,"nodeType":"287","endLine":354,"endColumn":17,"suggestions":"296"},{"ruleId":"281","severity":1,"message":"282","line":367,"column":33,"nodeType":"283","messageId":"284","endLine":367,"endColumn":35},{"ruleId":"289","severity":1,"message":"290","line":368,"column":40,"nodeType":"291","messageId":"292","endLine":368,"endColumn":42},{"ruleId":"281","severity":1,"message":"282","line":369,"column":33,"nodeType":"283","messageId":"284","endLine":369,"endColumn":35},{"ruleId":"277","severity":1,"message":"278","line":463,"column":21,"nodeType":"279","endLine":463,"endColumn":53},{"ruleId":"277","severity":1,"message":"278","line":480,"column":21,"nodeType":"279","endLine":480,"endColumn":59},{"ruleId":"262","severity":1,"message":"266","line":1,"column":20,"nodeType":"264","messageId":"265","endLine":1,"endColumn":29},{"ruleId":"262","severity":1,"message":"297","line":5,"column":19,"nodeType":"264","messageId":"265","endLine":5,"endColumn":27},{"ruleId":"262","severity":1,"message":"298","line":6,"column":19,"nodeType":"264","messageId":"265","endLine":6,"endColumn":27},{"ruleId":"262","severity":1,"message":"299","line":7,"column":18,"nodeType":"264","messageId":"265","endLine":7,"endColumn":25},{"ruleId":"281","severity":1,"message":"282","line":13,"column":33,"nodeType":"283","messageId":"284","endLine":13,"endColumn":35},{"ruleId":"281","severity":1,"message":"300","line":17,"column":28,"nodeType":"283","messageId":"284","endLine":17,"endColumn":30},{"ruleId":"285","severity":1,"message":"301","line":24,"column":8,"nodeType":"287","endLine":24,"endColumn":10,"suggestions":"302"},{"ruleId":"303","severity":1,"message":"304","line":28,"column":13,"nodeType":"279","endLine":39,"endColumn":14},{"ruleId":"262","severity":1,"message":"305","line":95,"column":12,"nodeType":"264","messageId":"265","endLine":95,"endColumn":31},{"ruleId":"281","severity":1,"message":"282","line":210,"column":29,"nodeType":"283","messageId":"284","endLine":210,"endColumn":31},{"ruleId":"289","severity":1,"message":"290","line":211,"column":36,"nodeType":"291","messageId":"292","endLine":211,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":212,"column":29,"nodeType":"283","messageId":"284","endLine":212,"endColumn":31},{"ruleId":"262","severity":1,"message":"266","line":1,"column":20,"nodeType":"264","messageId":"265","endLine":1,"endColumn":29},"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'notifications' is assigned a value but never used.","'UIElementsIcon' is defined but never used.","'Chip' is defined but never used.","'states' is assigned a value but never used.","'classes' is assigned a value but never used.",["306"],["307"],"'gifTexts' is assigned a value but never used.","'text' is assigned a value but never used.","'getGifTexts' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TextList' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'content', 'savedSound', and 'sharingSound'. Either include them or remove the dependency array.","ArrayExpression",["308"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'loadingGifTexts' is assigned a value but never used.","'GifTextsList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getGifTexts' and 'getGifs'. Either include them or remove the dependency array.",["309"],"'setColor' is assigned a value but never used.","'setSpeed' is assigned a value but never used.","'setYear' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'year'. Either include it or remove the dependency array.",["310"],"jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","'MultilineTextFields' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},"Update the dependencies array to be: [content, savedSound, sharingSound, showAnimation]",{"range":"317","text":"318"},"Update the dependencies array to be: [getGifTexts, getGifs, keyword]",{"range":"319","text":"320"},"Update the dependencies array to be: [year]",{"range":"321","text":"322"},[4013,4028],"[content, savedSound, sharingSound, showAnimation]",[12480,12489],"[getGifTexts, getGifs, keyword]",[963,965],"[year]"]