[{"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\index.js":"1","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\App.js":"2","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\context\\LayoutContext.js":"3","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\themes\\index.js":"4","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\themes\\default.js":"5","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Layout\\Layout.js":"6","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\error\\Error.js":"7","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\genurl\\Genurl.js":"8","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\error\\styles.js":"9","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Layout\\styles.js":"10","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\helpers\\index.js":"11","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\Animation.js":"12","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\Charts.js":"13","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\soundSettings\\SoundSettings.js":"14","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\tables\\Tables.js":"15","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\settings\\Settings.js":"16","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\maps\\Maps.js":"17","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\icons\\Icons.js":"18","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\notifications\\Notifications.js":"19","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\Dashboard.js":"20","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\Sidebar.js":"21","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Header\\Header.js":"22","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\styles.js":"23","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\services\\UploadService.js":"24","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\components\\UploadGif.js":"25","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\data.js":"26","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js":"27","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js":"28","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Header\\styles.js":"29","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\Dot.js":"30","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\styles.js":"31","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js":"32","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"33","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\PageTitle\\PageTitle.js":"34","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\styles.js":"35","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Wrappers\\Wrappers.js":"36","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Notification\\Notification.js":"37","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\notifications\\styles.js":"38","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Widget\\Widget.js":"39","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\http_common\\HTTPCommon.js":"40","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\icons\\styles.js":"41","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"42","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\maps\\styles.js":"43","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\PageTitle\\styles.js":"44","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Notification\\styles.js":"45","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\tables\\MTable.js":"46","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Widget\\styles.js":"47"},{"size":509,"mtime":1638479040102,"results":"48","hashOfConfig":"49"},{"size":905,"mtime":1638519305408,"results":"50","hashOfConfig":"49"},{"size":1378,"mtime":1638479040101,"results":"51","hashOfConfig":"49"},{"size":534,"mtime":1638479040116,"results":"52","hashOfConfig":"49"},{"size":3128,"mtime":1638569525017,"results":"53","hashOfConfig":"49"},{"size":4819,"mtime":1638480101511,"results":"54","hashOfConfig":"49"},{"size":1626,"mtime":1638479040106,"results":"55","hashOfConfig":"49"},{"size":4248,"mtime":1638480101527,"results":"56","hashOfConfig":"49"},{"size":1395,"mtime":1638479040107,"results":"57","hashOfConfig":"49"},{"size":716,"mtime":1638523681159,"results":"58","hashOfConfig":"49"},{"size":783,"mtime":1638480101511,"results":"59","hashOfConfig":"49"},{"size":17848,"mtime":1639926065552,"results":"60","hashOfConfig":"49"},{"size":5790,"mtime":1638479040103,"results":"61","hashOfConfig":"49"},{"size":4024,"mtime":1638480101527,"results":"62","hashOfConfig":"49"},{"size":117,"mtime":1638480101527,"results":"63","hashOfConfig":"49"},{"size":14007,"mtime":1640169545947,"results":"64","hashOfConfig":"49"},{"size":1010,"mtime":1638479040110,"results":"65","hashOfConfig":"49"},{"size":391433,"mtime":1638479040109,"results":"66","hashOfConfig":"49"},{"size":13862,"mtime":1638479040111,"results":"67","hashOfConfig":"49"},{"size":9787,"mtime":1640185717436,"results":"68","hashOfConfig":"49"},{"size":4009,"mtime":1639377065265,"results":"69","hashOfConfig":"49"},{"size":5333,"mtime":1638480101511,"results":"70","hashOfConfig":"49"},{"size":534,"mtime":1638479040103,"results":"71","hashOfConfig":"49"},{"size":508,"mtime":1638480101527,"results":"72","hashOfConfig":"49"},{"size":4096,"mtime":1638480101527,"results":"73","hashOfConfig":"49"},{"size":6501,"mtime":1639747413543,"results":"74","hashOfConfig":"49"},{"size":1909,"mtime":1638479040104,"results":"75","hashOfConfig":"49"},{"size":1396,"mtime":1638479040104,"results":"76","hashOfConfig":"49"},{"size":4043,"mtime":1638479040050,"results":"77","hashOfConfig":"49"},{"size":884,"mtime":1639378336775,"results":"78","hashOfConfig":"49"},{"size":1539,"mtime":1639377892615,"results":"79","hashOfConfig":"49"},{"size":1194,"mtime":1638569443625,"results":"80","hashOfConfig":"49"},{"size":4589,"mtime":1639721783482,"results":"81","hashOfConfig":"49"},{"size":447,"mtime":1638479040061,"results":"82","hashOfConfig":"49"},{"size":3241,"mtime":1638584526090,"results":"83","hashOfConfig":"49"},{"size":3892,"mtime":1638479040101,"results":"84","hashOfConfig":"49"},{"size":3340,"mtime":1638479040051,"results":"85","hashOfConfig":"49"},{"size":1943,"mtime":1638562869444,"results":"86","hashOfConfig":"49"},{"size":2581,"mtime":1638479040100,"results":"87","hashOfConfig":"49"},{"size":176,"mtime":1638480101527,"results":"88","hashOfConfig":"49"},{"size":812,"mtime":1638479040110,"results":"89","hashOfConfig":"49"},{"size":1609,"mtime":1640186009065,"results":"90","hashOfConfig":"49"},{"size":178,"mtime":1638479040111,"results":"91","hashOfConfig":"49"},{"size":482,"mtime":1638479040089,"results":"92","hashOfConfig":"49"},{"size":1040,"mtime":1638479040051,"results":"93","hashOfConfig":"49"},{"size":4799,"mtime":1640181060794,"results":"94","hashOfConfig":"49"},{"size":1130,"mtime":1638564740055,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"qqg34o",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"98"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\index.js",[],["198","199"],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\App.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\context\\LayoutContext.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\themes\\index.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\themes\\default.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Layout\\Layout.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\error\\Error.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\genurl\\Genurl.js",["200","201","202","203","204","205","206"],"import { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport Zoom from '@material-ui/core/Zoom/Zoom';\r\nimport {\r\n    StompSessionProvider,\r\n    useSubscription,\r\n} from \"react-stomp-hooks\";\r\n\r\nimport { getSharingGif, getSharingTextStyleId } from \"../../helpers\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Genurl() {\r\n    const SubscribingComponent = () => {\r\n        const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n        const [gifTexts, setGifTexts] = useState([]);\r\n        const [waiting, setWaiting] = useState(true);\r\n        const [savedGif, setSavedGif] = useState(\"\");\r\n        const [savedTextStyleId, setSavedTextStyleId] = useState(0);\r\n        \r\n        const ws = useRef(null);\r\n\r\n        const sharingGif = getSharingGif();\r\n        const sharingTextStyleId = getSharingTextStyleId();\r\n\r\n        const getGifTexts = async (text) => {\r\n            const res = await gf.animate(text, { limit: 16 })\r\n            setGifTexts(values => res.data);\r\n            setWaiting(values => false);\r\n            setTimeout(() => setWaiting(values => true), 5000);\r\n        }\r\n\r\n        const Item = (props) => {\r\n            return (\r\n                <div className=\"gif-item\">\r\n                    <img src={props.url} width=\"600\" height=\"300\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const TextList = (props) => {\r\n            const items = props.gifs.map((itemData, index) => {\r\n                if (index == (sharingTextStyleId ? sharingTextStyleId : savedTextStyleId))\r\n                    return <Item url={itemData.url} />;\r\n                return <div></div>\r\n            });\r\n            return <div className=\"text-container\">{items}</div>;\r\n        };\r\n\r\n        const onMessage = async (msg) => {\r\n            setWaiting(values => true);\r\n            await getGifTexts(msg.body);\r\n        }\r\n\r\n        useSubscription(\"/topic/message\", async (message) => await onMessage(message));\r\n        /*useEffect(() => {\r\n            getGifTexts(\"Cam on ban A da donate 100000 dong\");\r\n            setTimeout(() => getGifTexts(\"Cam on ban B da donate 700000 dong\"), 9000);\r\n        }, []);*/\r\n\r\n        useEffect(() => {\r\n            axios.get(\"https://web-donate.herokuapp.com/setting\")\r\n            .then(response => {\r\n                if (response.status == \"200\") {\r\n                    response.data.map(item => {\r\n                        if (item.id == 1) {\r\n                            setSavedGif(values => item.gifUrl);\r\n                            setSavedTextStyleId(values => item.textStyleId);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => console.log(error));\r\n        }, []);\r\n\r\n        return (\r\n            <> \r\n                <div style={{\r\n                    height: \"500px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"space-around\",\r\n                    alignItems: \"center\",\r\n                }}>\r\n                    <Zoom \r\n                        in={!waiting}\r\n                        timeout={{enter: 1500, exit: 200}}\r\n                    >\r\n                        <div>\r\n                            <img src={sharingGif ? sharingGif : savedGif} width=\"300\" height=\"200\"/>\r\n                        </div>\r\n                    </Zoom>\r\n                    <Zoom \r\n                        in={!waiting}\r\n                        timeout={{enter: 1500, exit: 200}}\r\n                    >\r\n                        <div style={{\r\n                            position: \"absolute\",\r\n                            top: \"48%\",\r\n                        }}>\r\n                            <TextList gifs={gifTexts} />\r\n                        </div>\r\n                    </Zoom>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StompSessionProvider\r\n                url={\"http://localhost:8080/gs-guide-websocket\"}\r\n                debug={(str) => {\r\n                    console.log(str);\r\n                }}\r\n            >\r\n                <SubscribingComponent />\r\n            </StompSessionProvider>\r\n        </>\r\n    );\r\n}\r\n","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\error\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Layout\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\helpers\\index.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\Animation.js",["207","208","209"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport ButtonBase from '@mui/material/ButtonBase';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport Box from '@mui/material/Box';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    LinearProgress,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport UploadGif from \"./components/UploadGif\";\r\nimport useStyles from \"./styles\";\r\nimport { setSharingGif, setSharingTextStyleId } from \"../../helpers\";\r\nimport UploadService from \"./services/UploadService\";\r\nimport axios from 'axios';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n}));\r\n  \r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n            <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n                position: 'absolute',\r\n                right: 8,\r\n                top: 8,\r\n                color: (theme) => theme.palette.grey[500],\r\n            }}\r\n            >\r\n            <CloseIcon />\r\n            </IconButton>\r\n        ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst ImageButton = styled(ButtonBase)(({ theme }) => ({\r\n    position: 'relative',\r\n    height: 200,\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '100% !important', // Overrides inline-style\r\n      height: 100,\r\n    },\r\n    '&:hover, &.Mui-focusVisible': {\r\n      zIndex: 1,\r\n      '& .MuiImageBackdrop-root': {\r\n        opacity: 0.15,\r\n      },\r\n      '& .MuiImageMarked-root': {\r\n        opacity: 0,\r\n      },\r\n      '& .MuiTypography-root': {\r\n        border: '4px solid currentColor',\r\n      },\r\n    },\r\n}));\r\n\r\nconst ImageSrc = styled('span')({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center 40%',\r\n  });\r\n  \r\nconst Image = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    color: theme.palette.common.white,\r\n}));\r\n  \r\nconst ImageBackdrop = styled('span')(({ theme }) => ({\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    backgroundColor: theme.palette.common.black,\r\n    opacity: 0.4,\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nconst ImageMarked = styled('span')(({ theme }) => ({\r\n    height: 3,\r\n    width: 18,\r\n    backgroundColor: theme.palette.common.white,\r\n    position: 'absolute',\r\n    bottom: -2,\r\n    left: 'calc(50% - 9px)',\r\n    transition: theme.transitions.create('opacity'),\r\n}));\r\n\r\nexport default function Animation() {\r\n    const gf = new GiphyFetch(\"vmqVD48zw7QGC3hKatE5bUSA0cZdXhyM\");\r\n    const [gifs, setGifs] = useState([]);\r\n    const [gifTexts, setGifTexts] = useState([]);\r\n    const [keyword, setKeyword] = useState(\"anime\");\r\n    const [loadingGifs, setLoadingGifs] = useState(false);\r\n    const [loadingGifTexts, setLoadingGifTexts] = useState(false);\r\n    const [openGifDialog, setOpenGifDialog] = useState(false);\r\n    const [openTextStyleDialog, setOpenTextStyleDialog] = useState(false);\r\n    const [focusGif, setFocusGif] = useState(\"\");\r\n    const [focusTextStyle, setFocusTextStyle] = useState(\"\");\r\n    const [focusTextStyleId, setFocusTextStyleId] = useState(0);\r\n    const [choosingGif, setChoosingGif] = useState(\"\");\r\n    const [choosingTextStyleId, setChoosingTextStyleId] = useState(\"\");\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [uploadedGifs, setUploadedGifs] = useState(undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpenGifDialog = (url) => {\r\n        setFocusGif(url);\r\n        setOpenGifDialog(true);\r\n    };\r\n\r\n    const handleOpenTextStyleDialog = (url, id) => {\r\n        setFocusTextStyle(url);\r\n        setFocusTextStyleId(id);\r\n        setOpenTextStyleDialog(true);\r\n    };\r\n      \r\n    const handleCloseGifDialog = () => {\r\n        setOpenGifDialog(false);\r\n    };\r\n\r\n    const handleCloseTextStyleDialog = () => {\r\n        setOpenTextStyleDialog(false);\r\n    };\r\n\r\n    const handleChooseGif = () => {\r\n        setChoosingGif(focusGif);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const handleChooseTextStyle = () => {\r\n        setChoosingTextStyleId(focusTextStyleId);\r\n        setOpenSnackbar(true);\r\n    }\r\n\r\n    const GifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const id = item.url.split('-').pop();\r\n                        const url = \"https://media.giphy.com/media/\" + id + \"/giphy.gif\";\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const GifTextsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item, index) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenTextStyleDialog(url, index)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const UploadedGifsList = (props) => {\r\n        return (\r\n            <div className={classes.root}>\r\n                <Box className={classes.imageList}>\r\n                    {props.gifs.map((item) => {\r\n                        const url = item.url;\r\n                        return (\r\n                            <ImageButton\r\n                                focusRipple\r\n                                key={url}\r\n                                style={{\r\n                                    width: \"25%\"\r\n                                }}\r\n                                onClick={() => handleOpenGifDialog(url)}\r\n                            >\r\n                                <ImageSrc style={{ backgroundImage: `url(${url})` }} />\r\n                                <ImageBackdrop className=\"MuiImageBackdrop-root\" />\r\n                                <Image>\r\n                                    <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"subtitle1\"\r\n                                    color=\"inherit\"\r\n                                    sx={{\r\n                                        position: 'relative',\r\n                                        p: 4,\r\n                                        pt: 2,\r\n                                        pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\r\n                                    }}\r\n                                    >\r\n                                        Click to choose\r\n                                        <ImageMarked className=\"MuiImageMarked-root\" />\r\n                                    </Typography>\r\n                                </Image>\r\n                            </ImageButton>\r\n                        );\r\n                    })}\r\n                </Box>\r\n          </div>\r\n        );\r\n    };\r\n\r\n    const getGifs = async (keyword) => {\r\n        const res = await gf.search(keyword, { limit: 16 });\r\n        setGifs(values => res.data);\r\n        setTimeout(() => setLoadingGifs(false), 2000);\r\n    }\r\n\r\n    const getGifTexts = async (text) => {\r\n        const res = await gf.animate(text, { limit: 16 })\r\n        setGifTexts(values => res.data);\r\n        setTimeout(() => setLoadingGifTexts(false), 2000);\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        setKeyword(event.target.value);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setSharingGif(choosingGif);\r\n        setSharingTextStyleId(choosingTextStyleId);\r\n        setOpenSnackbar(true);\r\n\r\n        axios.post(\"https://web-donate.herokuapp.com/setting\", {\r\n            id: 1,\r\n            gifUrl: choosingGif,\r\n            textStyleId: choosingTextStyleId,\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLoadingGifs(values => true);\r\n        getGifs(keyword);\r\n        setLoadingGifTexts(values => true);\r\n        getGifTexts(keyword);\r\n    }, [keyword]);\r\n\r\n    useEffect(() => {\r\n        UploadService.getGifFiles()\r\n          .then((response) => {\r\n            setUploadedGifs((values) => response.data);\r\n          })\r\n          .catch((error) => console.log(error));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PageTitle title=\"Animation Settings\"/>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <div style={{width: \"50%\"}}>\r\n                        <TextField \r\n                            label=\"Search by keyword\" \r\n                            color=\"primary\" \r\n                            variant=\"outlined\" \r\n                            size=\"small\" \r\n                            fullWidth \r\n                            focused \r\n                            value={keyword}\r\n                            onChange={handleInputChange}\r\n                            spellCheck=\"false\"\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifs && (<GifsList gifs={gifs} />)}\r\n                        {!!loadingGifs && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Choose Your Favorite Text Style\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {!loadingGifTexts && (<GifTextsList gifs={gifTexts} />)}\r\n                        {!!loadingGifTexts && (<LinearProgress />)}\r\n                    </Grid>\r\n                </Grid>\r\n                {uploadedGifs && (\r\n                    <Grid item container xs={12} spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                                Choose Your Uploaded Gif\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <UploadedGifsList gifs={uploadedGifs}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                )}\r\n                <Grid item container xs={12} spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                            Upload your Gif\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UploadGif />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div \r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={handleSave}>\r\n                            Save settings\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <BootstrapDialog\r\n                onClose={handleCloseGifDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openGifDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseGifDialog}>\r\n                    Preview gif\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusGif} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseGif(); handleCloseGifDialog(); }}>\r\n                    Choose this gif\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <BootstrapDialog\r\n                onClose={handleCloseTextStyleDialog}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={openTextStyleDialog}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleCloseTextStyleDialog}>\r\n                    Preview text style\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <img src={focusTextStyle} width=\"350\"></img>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button autoFocus onClick={() => {handleChooseTextStyle(); handleCloseTextStyleDialog(); }}>\r\n                    Choose this text style\r\n                </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Snackbar open={openSnackbar} autoHideDuration={1000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\r\n                    Successfully saved your choice!\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\Charts.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\soundSettings\\SoundSettings.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\tables\\Tables.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\settings\\Settings.js",["210"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Settings.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NumberFormat from 'react-number-format';\r\nimport Slider from \"@mui/material/Slider\";\r\nimport Typography from '@mui/material/Typography';\r\nimport  Button from '@material-ui/core/Button';\r\nimport classNames from 'classnames';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport axios from 'axios';\r\nconst useStyles = makeStyles((theme) => ({\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: '#e3e8eb !important'\r\n    }\r\n  },\r\n  notchedOutline: {\r\n    // height:'50px',\r\n    borderWidth: '0.25px',\r\n    borderColor: '#e3e8eb !important'\r\n  },\r\n  multilineColor:{\r\n    color:'white'\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  root1: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1.5),\r\n    color: 'white',\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  Bar: {\r\n    backgroundColor: \"#17242d\" ,\r\n  },\r\n  root2: {\r\n    '& > *': {\r\n      width: '25ch',\r\n    },\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  bootstrapRoot: {\r\n    boxShadow: 'none',\r\n    textTransform: 'none',\r\n    fontSize: 16,\r\n    padding: '6px 12px',\r\n    border: '1px solid',\r\n    lineHeight: 1.5,\r\n    backgroundColor: '#007bff',\r\n    borderColor: '#007bff',\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:hover': {\r\n      backgroundColor: '#0069d9',\r\n      borderColor: '#0062cc',\r\n    },\r\n    '&:active': {\r\n      boxShadow: 'none',\r\n      backgroundColor: '#0062cc',\r\n      borderColor: '#005cbf',\r\n    },\r\n    '&:focus': {\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\r\n    },\r\n  },\r\n\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n//-------SaveSettings---------\r\nfunction NodeSave({Datasave}) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const handleClickVariant = (variant) => () => {\r\n    // variant could be success, error, warning, info, or default\r\n    enqueueSnackbar('Successfully saved!', { variant });\r\n    SaveData();\r\n  };\r\n  function SaveData(){\r\n    axios.put(`${settingsAPI}/${Datasave.IdData+\"\"}`, {\r\n        MinAmount: Datasave.values1 ,\r\n        ShowTopDonation: Datasave.values2,\r\n        MessageTemplate: Datasave.values3,\r\n        AlertDuration: Datasave.values4, \r\n        AlertTextDelay :Datasave.values5\r\n      });\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n          <Button\r\n            onClick={handleClickVariant('success')}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disableRipple\r\n            className={classNames(classes.margin, classes.bootstrapRoot)}\r\n            >\r\n            Save Settings\r\n          </Button>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction SaveSettings({DataSave}) {\r\n  return (\r\n    <SnackbarProvider maxSnack={3}>\r\n      <NodeSave  Datasave={DataSave} />\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n//--------FormRow---------------------------------\r\n  const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {\r\n    const { onChange, ...other } = props;\r\n  \r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={ref}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        thousandSeparator\r\n        isNumericString\r\n        prefix=\"$\"\r\n      />\r\n    );\r\n  });\r\n  \r\n  NumberFormatCustom.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };\r\nfunction NestedGrid({data}) {\r\n  const classes = useStyles();\r\n  // const [values, setValues] = React.useState('1320');\r\n  // const [values1, setValues1] = React.useState('100');\r\n  var [values, setValues] = React.useState({\r\n      values1: data.MinAmount  ,\r\n      values2: data.ShowTopDonation,\r\n      values3: data.MessageTemplate,\r\n      values4: data.AlertDuration, \r\n      values5 :data.AlertTextDelay,\r\n      IdData :data.id\r\n  });\r\n  var handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  return (\r\n    <div className={classes.root1}>\r\n      <Grid container spacing={5}>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Min Amount</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n        <div className={classes.root2}>\r\n        <Box\r\n        sx={{\r\n          '& > :not(style)': {\r\n            m: 1,\r\n          },\r\n        }}\r\n      >\r\n        <TextField\r\n          className=\"borderText\"\r\n          variant=\"outlined\"\r\n          value={values.values1}\r\n          // onChange={(event) =>setValuess(event.target.value)}\r\n          onChange={handleChange('values1')}\r\n          name=\"numberformat\"\r\n          id=\"formatted-numberformat-input\"\r\n          InputProps={{\r\n            inputComponent: NumberFormatCustom,\r\n            classes: {\r\n              root: classes.cssOutlinedInput,\r\n              notchedOutline: classes.notchedOutline,\r\n              input: classes.multilineColor\r\n            },\r\n          }\r\n        }\r\n        />\r\n        </Box>\r\n        </div>\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n        <Tooltip\r\n          title=\"The smallest a donation can be for the donation alert to be displayed. This is useful if you only want the donation alert to be displayed for larger amounts. Remember, this is the amount donated in the amount donated in the currency you have selected in the donation settings section. Setting this to 0 will make every donation alert be displayed.\"\r\n          arrow>\r\n          <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Show Top Donation</Paper>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n        <FormControl component=\"fieldset\">\r\n      <RadioGroup\r\n        aria-label=\"gender\"\r\n        name=\"controlled-radio-buttons-group\"\r\n        value={values.values2}\r\n        onChange={handleChange('values2')}\r\n      >\r\n        <FormControlLabel value=\"disabled\" control={<Radio />} label=\"  Disabled\" />\r\n        <FormControlLabel value=\"enabled\" control={<Radio />} label=\"  Enabled\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n        <Tooltip title=\"Add\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Message Template</Paper>\r\n        </Grid>\r\n        <Grid item xs={7}>\r\n        <TextField \r\n        className=\"borderText\"\r\n        variant=\"outlined\" \r\n        type=\"text\" id=\"MessageTemplate\"\r\n        name=\"MessageTemplate\" \r\n        // defaultValue = \"{name} donated {amount}!\" \r\n        // defaultValue = {data.MessageTemplate}\r\n        value={values.values3}\r\n        onChange={handleChange('values3')}\r\n        InputProps={{\r\n          classes: {\r\n            root: classes.cssOutlinedInput,\r\n            notchedOutline: classes.notchedOutline,\r\n            input: classes.multilineColor\r\n          },\r\n        }}\r\n        />\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n        <Tooltip \r\n        title=\"When a donation alert shows up, this will be the format of the message. Available Tokens, {name} The name of the donator, {amount} The amount that was donated\" \r\n        arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Alert Duration</Paper>\r\n        </Grid>\r\n        <Grid className=\"SliderAlert\" item xs={7}>\r\n            <Slider \r\n              max=\"30\"\r\n              // defaultValue={data.AlertDuration}\r\n              value={values.values4}\r\n              onChange={handleChange('values4')}\r\n              aria-label=\"Default\" \r\n              valueLabelDisplay=\"on\" \r\n            />\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n        <Tooltip title=\"How many seconds to show this alert before hiding it.\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment>\r\n        <Grid item xs={3}>\r\n          <Paper elevation={0} className={classes.paper}>Alert Text Delay</Paper>\r\n        </Grid>\r\n        <Grid className=\"SliderAlert\" item xs={7}>\r\n          <Slider\r\n            max=\"30\"\r\n            size=\"big\"\r\n            defaultValue={data.AlertTextDelay}\r\n            value={values.values5}\r\n            onChange={handleChange('values5')}\r\n            aria-label=\"Default\" \r\n            valueLabelDisplay=\"on\" \r\n          />\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n        <Tooltip title=\"How many seconds after your image/video/audios to show the alert text. This is useful if you want to wait a few seconds for an animation to finish before your alert text appears.\" arrow>\r\n        <HelpIcon color=\"action\" />\r\n        </Tooltip>\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n        <React.Fragment >\r\n        \r\n        <Grid \r\n          className=\"ButtonSave\"\r\n          item xs={11} >\r\n          <SaveSettings\r\n          DataSave={values}\r\n          />\r\n        </Grid>\r\n      </React.Fragment>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n//-----Ghep API--------\r\nvar settingsAPI =\"https://web-donate.herokuapp.com/setting\"\r\n\r\nfunction SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n const [DataSettings, setDataSettings] = React.useState([]);\r\n function GetDataSettings() {\r\n    axios.get(settingsAPI)\r\n      .then(res => {\r\n        setDataSettings(res.data);\r\n      })\r\n  };\r\n  React.useEffect(() => {\r\n    axios.get(settingsAPI)\r\n      .then(res => {\r\n        setDataSettings(res.data);\r\n      });\r\n  }, []);\r\n  function handleAddLevel() {\r\n\r\n    axios.post(settingsAPI, {\r\n      id:3,\r\n      MinAmount: \"0\" ,\r\n      ShowTopDonation: 'disabled',\r\n      MessageTemplate: \"{name} donated {amount}!\",\r\n      AlertDuration: 0, \r\n      AlertTextDelay :0\r\n    })\r\n    .then(function(){GetDataSettings();});\r\n  };\r\n  function deletePost() {\r\n    if(DataSettings.length!=1){\r\n    axios.delete(`${settingsAPI}/${DataSettings.length-1+\"\"}`)\r\n    .then(function(){GetDataSettings();});\r\n    };\r\n  };\r\n  return (\r\n    <div className={classes.root} >\r\n      <AppBar className={classes.Bar} position=\"static\">\r\n        <Tabs aria-label=\"simple tabs example\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        variant=\"scrollable\"\r\n        scrollButtons\r\n        allowScrollButtonsMobile\r\n        textColor='inherit'\r\n        >\r\n          {DataSettings.map(function(DataSetting){\r\n            const Label= \"Donation Level \"+(DataSetting.id+1);\r\n            return(\r\n            <Tab\r\n            onClick={GetDataSettings}\r\n            label={Label} {...a11yProps(DataSetting.id)} />\r\n          );})\r\n          }\r\n          <IconButton color=\"primary\"\r\n          onClick={deletePost}\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n          <IconButton color=\"primary\"\r\n          onClick={handleAddLevel}\r\n          >\r\n            <AddOutlinedIcon />\r\n          </IconButton>\r\n        </Tabs>\r\n      </AppBar>\r\n      {DataSettings.map(DataSetting=>(\r\n      <TabPanel value={value} index={DataSetting.id}>\r\n      <NestedGrid data={DataSetting} onClick={GetDataSettings} />\r\n      </TabPanel>))\r\n    }\r\n    </div>\r\n  );\r\n}\r\nexport default function Settings(){\r\n  return(\r\n    <div id=\"Body\">\r\n      <h1>DONATION SETTING</h1>\r\n      <SimpleTabs />\r\n    </div>\r\n  );\r\n}\r\n","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\maps\\Maps.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\icons\\Icons.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\notifications\\Notifications.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\Dashboard.js",["211","212"],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\Sidebar.js",["213","214","215"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport HistoryEduIcon from '@mui/icons-material/HistoryEdu';\r\nimport FlutterDashIcon from '@mui/icons-material/FlutterDash';\r\nimport {\r\n  HeadsetMic,\r\n  Settings,\r\n  Home as HomeIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  FormatSize as TypographyIcon,\r\n  FilterNone as UIElementsIcon,\r\n  BorderAll as TableIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\nimport Dot from \"./components/Dot\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"Dashboard\", link: \"/app/dashboard\", icon: <HomeIcon color=\"primary\" /> },\r\n  {\r\n    id: 1,\r\n    label: \"Animation\",\r\n    link: \"/app/animation\",\r\n    icon: <FlutterDashIcon color=\"primary\" />,\r\n  },\r\n  { id: 2, label: \"History\", link: \"/app/tables\", icon: <HistoryEduIcon color=\"primary\" /> },\r\n  { id: 3, label: \"General Settings\", link: \"/app/settings\", icon: <Settings color=\"primary\"/>},\r\n  { id: 4, label: \"Sound Settings\", link: \"/app/soundSettings\", icon: <HeadsetMic color=\"primary\"/>},\r\n  {\r\n    id: 5,\r\n    label: \"Notifications\",\r\n    link: \"/app/notifications\",\r\n    icon: <NotificationsIcon color=\"primary\"/>,\r\n  },\r\n  {\r\n    id: 6,\r\n    label: \"UI Elements\",\r\n    link: \"/app/ui\",\r\n    icon: <UIElementsIcon color=\"primary\"/>,\r\n    children: [\r\n      { label: \"Icons\", link: \"/app/ui/icons\" },\r\n      { label: \"Charts\", link: \"/app/ui/charts\" },\r\n      { label: \"Maps\", link: \"/app/ui/maps\" },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function() {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map(link => (\r\n          <SidebarLink className={classes.sidebarList}\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Header\\Header.js",["216","217","218","219"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  InputBase,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Search as SearchIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst notifications = [\r\n  { \r\n    color: \"warning\", \r\n    type: \"notification\",\r\n    message: \"Check out this awesome ticket\" \r\n  },\r\n  {\r\n    color: \"success\",\r\n    type: \"notification\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    color: \"primary\",\r\n    type: \"notification\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\r\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n  var [notificationsData, setNotificationsData] = useState([]);\r\n  var ws = useRef(null);\r\n\r\n  const onMessage = (event) => {\r\n    let recv = JSON.parse(event.data);\r\n    setNotificationsData((values) => {\r\n      let newData = [...values];\r\n      newData.push({\r\n        color: \"primary\",\r\n        type: \"notification\",\r\n        message: recv.data,\r\n      });\r\n      if (newData.length > 5) {\r\n        newData = newData.slice(1);\r\n      }\r\n      return newData;\r\n    });\r\n  }\r\n\r\n  /*useEffect(() => {\r\n    ws.current = new WebSocket(\"localhost:3000\");\r\n    ws.current.onmessage = onMessage;\r\n    const interval = setInterval(() => ws.current.send(\"echo\"), 1000);\r\n    return () => {\r\n      ws.current.close();\r\n      clearInterval(interval);\r\n    }\r\n  }, []);*/\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowBackIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n          Donation GIFs Webapp\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n        <div\r\n          className={classNames(classes.search, {\r\n            [classes.searchFocused]: isSearchOpen,\r\n          })}\r\n        >\r\n          <div\r\n            className={classNames(classes.searchIcon, {\r\n              [classes.searchIconOpened]: isSearchOpen,\r\n            })}\r\n            onClick={() => setSearchOpen(!isSearchOpen)}\r\n          >\r\n            <SearchIcon classes={{ root: classes.headerIcon }} />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setNotificationsMenu(e.currentTarget);\r\n            setIsNotificationsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isNotificationsUnread ? notifications.length : null}\r\n            color=\"warning\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <Menu\r\n          id=\"notifications-menu\"\r\n          open={Boolean(notificationsMenu)}\r\n          anchorEl={notificationsMenu}\r\n          onClose={() => setNotificationsMenu(null)}\r\n          className={classes.headerMenu}\r\n          disableAutoFocusItem\r\n        >\r\n          {notifications/* {notificationsData} */.map(notification => (\r\n            <MenuItem\r\n              /*key={notification.id}*/\r\n              onClick={() => setNotificationsMenu(null)}\r\n              className={classes.headerMenuItem}\r\n            >\r\n              <Notification {...notification} typographyVariant=\"inherit\" />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\services\\UploadService.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\components\\UploadGif.js",["220"],"import { useState, useEffect } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Grid, Box, Typography, Button, withStyles } from '@material-ui/core';\r\n\r\nimport UploadService from \"../services/UploadService\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#EEEEEE\",\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nexport default function UploadGif() {\r\n  const [state, setState] = useState({\r\n    currentFile: undefined,\r\n    previewGif: undefined,\r\n    progress: 0,\r\n    message: \"\",\r\n    isError: false,\r\n  });\r\n\r\n  const onSelectFile = (event) => {\r\n    setState(values => ({\r\n      ...values,\r\n      currentFile: event.target.files[0],\r\n      previewGif: URL.createObjectURL(event.target.files[0]),\r\n      progress: 0,\r\n      message: \"\",\r\n    }));\r\n  };\r\n\r\n  const onUpload = () => {\r\n    setState(values => ({\r\n      ...values,\r\n      progress: 0,\r\n    }));\r\n\r\n    UploadService.upload(state.currentFile, (event) => {\r\n      setState(values => ({\r\n        ...values,\r\n        progress: Math.round((100 * event.loaded) / event.total),\r\n      }));\r\n    })\r\n      .then((response) => {\r\n        setState(values => ({\r\n          ...values,\r\n          message: response.data.message + \". Reload the page to see the result!\",\r\n          isError: false,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        setState(values => ({\r\n          ...values,\r\n          progress: 0,\r\n          message: \"Could not upload the gif!\",\r\n          currentFile: undefined,\r\n          isError: true\r\n        }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={onSelectFile} />\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" >\r\n                Choose your Gif\r\n            </Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"file-name\">\r\n            {state.currentFile ? state.currentFile.name : null}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            className=\"btn-upload\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            component=\"span\"\r\n            disabled={!state.currentFile}\r\n            onClick={onUpload}>\r\n            Upload\r\n          </Button>\r\n        </Grid>\r\n        {state.message && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" className={`upload-message ${state.isError ? \"error\" : \"\"}`}>\r\n              {state.message}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          {state.currentFile && (\r\n            <Box className=\"my20\" display=\"flex\" alignItems=\"center\">\r\n              <Box width=\"100%\" mr={1}>\r\n                <BorderLinearProgress variant=\"determinate\" value={state.progress} />\r\n              </Box>\r\n              <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${state.progress}%`}</Typography>\r\n              </Box>\r\n            </Box>)\r\n          }\r\n        </Grid>\r\n        {state.previewGif && (\r\n          <Grid item container xs={12} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                Preview Gif\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                <img className=\"preview my20\" src={state.previewGif} alt=\"\" width=\"350\"/>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\data.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\charts\\components\\ApexLineChart.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Header\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\Dot.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\components\\Table\\Table.js",["221","222","223"],"import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableBody,\r\n  TableCell,\r\n  Chip\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../../styles\";\r\nimport './style.css';\r\nconst states = {\r\n  sent: \"success\",\r\n  pending: \"warning\",\r\n  declined: \"secondary\",\r\n};\r\n\r\nexport default function TableComponent({ data }) {\r\n  const classes = useStyles();\r\n  var keys = Object.keys(data[0]).map(i => i.toUpperCase());\r\n  keys.shift(); // delete \"id\" key\r\n\r\n  return (\r\n    <Table className=\"-mb0\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {keys.map(key => (\r\n            <TableCell className=\"colorWord\" key={key}>{key}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {data.map(({ id, name, bankingNum, date, money}) => (\r\n          <TableRow key={id}>\r\n            <TableCell className=\"pl-3 fw-normal colorWord\">{name}</TableCell>\r\n            <TableCell className=\"colorWord\">{bankingNum}</TableCell>\r\n            <TableCell className=\"colorWord\">{date}</TableCell>\r\n            <TableCell className=\"colorWord\">{money}</TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\PageTitle\\PageTitle.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\dashboard\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Wrappers\\Wrappers.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Notification\\Notification.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\notifications\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Widget\\Widget.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\animation\\http_common\\HTTPCommon.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\icons\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\maps\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\PageTitle\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Notification\\styles.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\pages\\tables\\MTable.js",[],"D:\\CN dung visual\\ghepAPI\\Front-end\\src\\components\\Widget\\styles.js",[],{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":20,"column":15,"nodeType":"230","messageId":"231","endLine":20,"endColumn":17},{"ruleId":"232","severity":1,"message":"233","line":35,"column":21,"nodeType":"234","endLine":35,"endColumn":68},{"ruleId":"235","severity":1,"message":"236","line":42,"column":27,"nodeType":"237","messageId":"238","endLine":42,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":63,"column":37,"nodeType":"237","messageId":"238","endLine":63,"endColumn":39},{"ruleId":"239","severity":1,"message":"240","line":64,"column":44,"nodeType":"241","messageId":"242","endLine":64,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":65,"column":37,"nodeType":"237","messageId":"238","endLine":65,"endColumn":39},{"ruleId":"232","severity":1,"message":"233","line":89,"column":29,"nodeType":"234","endLine":89,"endColumn":101},{"ruleId":"243","severity":1,"message":"244","line":351,"column":8,"nodeType":"245","endLine":351,"endColumn":17,"suggestions":"246"},{"ruleId":"232","severity":1,"message":"233","line":446,"column":21,"nodeType":"234","endLine":446,"endColumn":53},{"ruleId":"232","severity":1,"message":"233","line":463,"column":21,"nodeType":"234","endLine":463,"endColumn":59},{"ruleId":"235","severity":1,"message":"247","line":421,"column":27,"nodeType":"237","messageId":"238","endLine":421,"endColumn":29},{"ruleId":"228","severity":1,"message":"248","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":25},{"ruleId":"228","severity":1,"message":"249","line":28,"column":8,"nodeType":"230","messageId":"231","endLine":28,"endColumn":12},{"ruleId":"228","severity":1,"message":"250","line":10,"column":17,"nodeType":"230","messageId":"231","endLine":10,"endColumn":31},{"ruleId":"228","severity":1,"message":"251","line":12,"column":16,"nodeType":"230","messageId":"231","endLine":12,"endColumn":25},{"ruleId":"228","severity":1,"message":"252","line":24,"column":8,"nodeType":"230","messageId":"231","endLine":24,"endColumn":11},{"ruleId":"228","severity":1,"message":"253","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":26},{"ruleId":"228","severity":1,"message":"254","line":66,"column":8,"nodeType":"230","messageId":"231","endLine":66,"endColumn":25},{"ruleId":"228","severity":1,"message":"229","line":67,"column":7,"nodeType":"230","messageId":"231","endLine":67,"endColumn":9},{"ruleId":"228","severity":1,"message":"255","line":69,"column":9,"nodeType":"230","messageId":"231","endLine":69,"endColumn":18},{"ruleId":"228","severity":1,"message":"253","line":1,"column":20,"nodeType":"230","messageId":"231","endLine":1,"endColumn":29},{"ruleId":"228","severity":1,"message":"256","line":8,"column":3,"nodeType":"230","messageId":"231","endLine":8,"endColumn":7},{"ruleId":"228","severity":1,"message":"257","line":12,"column":7,"nodeType":"230","messageId":"231","endLine":12,"endColumn":13},{"ruleId":"228","severity":1,"message":"258","line":19,"column":9,"nodeType":"230","messageId":"231","endLine":19,"endColumn":16},"no-native-reassign",["259"],"no-negated-in-lhs",["260"],"no-unused-vars","'ws' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getGifTexts' and 'getGifs'. Either include them or remove the dependency array.","ArrayExpression",["261"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'data' is defined but never used.","'TypographyIcon' is defined but never used.","'TableIcon' is defined but never used.","'Dot' is defined but never used.","'useEffect' is defined but never used.","'notificationsData' is assigned a value but never used.","'onMessage' is assigned a value but never used.","'Chip' is defined but never used.","'states' is assigned a value but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},"Update the dependencies array to be: [getGifTexts, getGifs, keyword]",{"range":"264","text":"265"},[12384,12393],"[getGifTexts, getGifs, keyword]"]